/* 
 * Payrobot
 *
 * # Introduction Accept, store, send or forward Bitcoin, Litecoin and Bitcoin Cash for your website or app and protect your privacy.  Supported crytocurrencies:   * BTC Bitcoin   * LTC Litecoin   * BCH Bitcoin Cash   ## Benefits    * **Anonymous** No personal details are required and transactions are mixed among all payments. You can forward your payments so as soon payrobot.io receives it forwards it to another address under your control.      * **No Registration** No registration, sign-up, application or form required to use payrobot.io      * **Easy Integration** Integrate your web / app through our simple RESTful API, you can accept payments with just one line of code!      * **Instant Payment Notification** Our servers notify your web / app the status of your payments. No polling, daemons or cronjobs required on your side!      * **Secure** Payrobot.io works with SSL and bank-level security protocols. Your transactions are safe!   ## Features **Payment Forward** Generate one-time addresses to recieve payments. Payrobot will notify your web /app through callbacks (webhooks) the status of the payment. As soon as it's confirmed the payment is forwarded to your desired address.  **Wallet** Receive, send payments and store your coins in a secure, private and anonymous wallet. All events are notified to your web / app through callbacks (webhooks). You can generate wallets with just one line of code without registration or further information  ## Fees **Only 0.90% per inbound transaction** (receive payments), NO HIDDEN FEES. All outbound transactions (send funds) are totally free.  Minimum fees applies, therefore the largest amount is going to be considered as fee either: `(inboundAmount*feePct)` or `the minimum fee`  **Inbound Fees (Receive payments)**    - `Bitcoin` 0.90% *(Minimum fee 0.00005 BTC)*   - `Litecoin` 0.90% *(Minimum fee 0.0005 LTC)*   - `Bitcoin Cash` 0.90% *(Minimum fee 0.0005 BCH)*     **Outbound Fees (Send funds)**    - `Bitcoin` 0.00%   - `Litecoin` 0.00%   - `Bitcoin Cash` 0.00%   ## Rate Limit To guarantee the good performance of the service and its fair use. The API is **limited to receiving 120 requests per minute per IP**, which is sufficient for most use cases.  Payrobot.io is asynchronous in most API methods to communicate with your application through callbacks (webhooks), thus reducing unnecessary calls to the service.  **If the limit is exceeded, the IP will be banned for 1 minute.**  If you require an upper limit for your application, do not hesitate to contact us  ## Considerations    * Amounts in responses are expresed as `strings`      * Wallets are not multi-currency, you have to create a different wallet per cryptocurrency (You can't store Litecoin in a Bitcoin wallet and vice-versa)      * Payment forwarding has to be of the same type of currency (You can't forward a Bitcoin Cash payment to a Bitcoin address and vice-versa)    
 *
 * The version of the OpenAPI document: 1.0
 * Contact: contact@payrobot.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using payrobot.Client;
using payrobot.Model;

namespace payrobot.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPaymentApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Generate a new one-use address to receive a payment
        /// </summary>
        /// <remarks>
        /// Generates a new one-use address to receive a payment. It callbacks your web/app server as soon as it&#39;s paid and confirmed.  **Payment can be &#x60;forwarded&#x60; to another address or it can be &#x60;stored&#x60; in a payrobot.io wallet**     - -- ## Important    * Unpaid requests are deleted after **3 hours** of theirs creation   * Confirmed payments information is deleted after **3 days** of being confirmed    - -- ## Minimum Amounts     * &#x60;Bitcoin&#x60;: 0.0001 BTC   * &#x60;Litecoin&#x60;: 0.001 LTC   * &#x60;Bitcoin Cash&#x60;: 0.001 BCH    - -- ## Callbacks A **payment notificacion** will be sent to your callback url in the following scenarios:    1. *Payment is received partially*   2. *Payment is being confirmed by network*   3. *Payment is confirmed at least with 1 confirmation*   The callback sent to your callback url is a **POST** request with the following parameters:  *Example:*      currency:         \&quot;BTC\&quot;     paymentId:        \&quot;698fd3f6-5482-4798-8a46-6732af440616\&quot;     address:          \&quot;3KoUDMfrov91G4SXaCKGvTWDjGia9Jod5b\&quot;     type:             0     partialAmount:    \&quot;0.00\&quot;                       //Partial amount received when payment is incomplete     remainingAmount:  \&quot;0.00\&quot;                       //Remaining amount to pay when payment is incomplete     amount:           \&quot;0.1\&quot;     feePct:           0.90     feeAmount:        \&quot;0.0009\&quot;     finalAmount:      \&quot;0.0991\&quot;     destination:      \&quot;698fd3f6-5482-4798-8a46-6732af440616\&quot;     reference:        \&quot;12345\&quot;     status:           2 
        /// </remarks>
        /// <exception cref="payrobot.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Object Currency:   * &#x60;btc&#x60;: Bitcoin   * &#x60;ltc&#x60;: Litecoin   * &#x60;bch&#x60;: Bitcoin Cash </param>
        /// <param name="type">* &#x60;0: Receive and forward&#x60; payment is forwarded to a desired coin address once it&#39;s confirmed  * &#x60;1: Receive and store&#x60; payment is stored in a payrobot.io wallet </param>
        /// <param name="destination">* For &#x60;Receive and forward&#x60; payment is the &#x60;ADDRESS&#x60; where the payment is going to be forwarded as soon as it&#39;s confirmed. **ADDRESS HAS TO BE OF THE SAME TYPE OF CURRENCY**  * For &#x60;Receive and store&#x60; payment is the payrobot.io &#x60;WALLET ID&#x60; where the payment is going to be stored as soon as it&#39;s confirmed. **WALLET HAS TO BE OF THE SAME TYPE OF CURRENCY** </param>
        /// <param name="amount">Amount of the payment</param>
        /// <param name="callback">Your URL where payrobot.io will send the status of the payment (Webhook)</param>
        /// <param name="reference">Optional custom reference to identify the payment (optional)</param>
        /// <returns>PaymentRequest</returns>
        PaymentRequest CreatePayment (string currency, int type, string destination, decimal amount, string callback, string reference = default(string));

        /// <summary>
        /// Generate a new one-use address to receive a payment
        /// </summary>
        /// <remarks>
        /// Generates a new one-use address to receive a payment. It callbacks your web/app server as soon as it&#39;s paid and confirmed.  **Payment can be &#x60;forwarded&#x60; to another address or it can be &#x60;stored&#x60; in a payrobot.io wallet**     - -- ## Important    * Unpaid requests are deleted after **3 hours** of theirs creation   * Confirmed payments information is deleted after **3 days** of being confirmed    - -- ## Minimum Amounts     * &#x60;Bitcoin&#x60;: 0.0001 BTC   * &#x60;Litecoin&#x60;: 0.001 LTC   * &#x60;Bitcoin Cash&#x60;: 0.001 BCH    - -- ## Callbacks A **payment notificacion** will be sent to your callback url in the following scenarios:    1. *Payment is received partially*   2. *Payment is being confirmed by network*   3. *Payment is confirmed at least with 1 confirmation*   The callback sent to your callback url is a **POST** request with the following parameters:  *Example:*      currency:         \&quot;BTC\&quot;     paymentId:        \&quot;698fd3f6-5482-4798-8a46-6732af440616\&quot;     address:          \&quot;3KoUDMfrov91G4SXaCKGvTWDjGia9Jod5b\&quot;     type:             0     partialAmount:    \&quot;0.00\&quot;                       //Partial amount received when payment is incomplete     remainingAmount:  \&quot;0.00\&quot;                       //Remaining amount to pay when payment is incomplete     amount:           \&quot;0.1\&quot;     feePct:           0.90     feeAmount:        \&quot;0.0009\&quot;     finalAmount:      \&quot;0.0991\&quot;     destination:      \&quot;698fd3f6-5482-4798-8a46-6732af440616\&quot;     reference:        \&quot;12345\&quot;     status:           2 
        /// </remarks>
        /// <exception cref="payrobot.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Object Currency:   * &#x60;btc&#x60;: Bitcoin   * &#x60;ltc&#x60;: Litecoin   * &#x60;bch&#x60;: Bitcoin Cash </param>
        /// <param name="type">* &#x60;0: Receive and forward&#x60; payment is forwarded to a desired coin address once it&#39;s confirmed  * &#x60;1: Receive and store&#x60; payment is stored in a payrobot.io wallet </param>
        /// <param name="destination">* For &#x60;Receive and forward&#x60; payment is the &#x60;ADDRESS&#x60; where the payment is going to be forwarded as soon as it&#39;s confirmed. **ADDRESS HAS TO BE OF THE SAME TYPE OF CURRENCY**  * For &#x60;Receive and store&#x60; payment is the payrobot.io &#x60;WALLET ID&#x60; where the payment is going to be stored as soon as it&#39;s confirmed. **WALLET HAS TO BE OF THE SAME TYPE OF CURRENCY** </param>
        /// <param name="amount">Amount of the payment</param>
        /// <param name="callback">Your URL where payrobot.io will send the status of the payment (Webhook)</param>
        /// <param name="reference">Optional custom reference to identify the payment (optional)</param>
        /// <returns>ApiResponse of PaymentRequest</returns>
        ApiResponse<PaymentRequest> CreatePaymentWithHttpInfo (string currency, int type, string destination, decimal amount, string callback, string reference = default(string));
        /// <summary>
        /// Get detailed information about a payment
        /// </summary>
        /// <remarks>
        /// Gets detailed information about a payment
        /// </remarks>
        /// <exception cref="payrobot.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Object Currency:   * &#x60;btc&#x60;: Bitcoin   * &#x60;ltc&#x60;: Litecoin   * &#x60;bch&#x60;: Bitcoin Cash </param>
        /// <param name="paymentId">Payment ID to query</param>
        /// <returns>PaymentRequest</returns>
        PaymentRequest GetPayment (string currency, string paymentId);

        /// <summary>
        /// Get detailed information about a payment
        /// </summary>
        /// <remarks>
        /// Gets detailed information about a payment
        /// </remarks>
        /// <exception cref="payrobot.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Object Currency:   * &#x60;btc&#x60;: Bitcoin   * &#x60;ltc&#x60;: Litecoin   * &#x60;bch&#x60;: Bitcoin Cash </param>
        /// <param name="paymentId">Payment ID to query</param>
        /// <returns>ApiResponse of PaymentRequest</returns>
        ApiResponse<PaymentRequest> GetPaymentWithHttpInfo (string currency, string paymentId);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Generate a new one-use address to receive a payment
        /// </summary>
        /// <remarks>
        /// Generates a new one-use address to receive a payment. It callbacks your web/app server as soon as it&#39;s paid and confirmed.  **Payment can be &#x60;forwarded&#x60; to another address or it can be &#x60;stored&#x60; in a payrobot.io wallet**     - -- ## Important    * Unpaid requests are deleted after **3 hours** of theirs creation   * Confirmed payments information is deleted after **3 days** of being confirmed    - -- ## Minimum Amounts     * &#x60;Bitcoin&#x60;: 0.0001 BTC   * &#x60;Litecoin&#x60;: 0.001 LTC   * &#x60;Bitcoin Cash&#x60;: 0.001 BCH    - -- ## Callbacks A **payment notificacion** will be sent to your callback url in the following scenarios:    1. *Payment is received partially*   2. *Payment is being confirmed by network*   3. *Payment is confirmed at least with 1 confirmation*   The callback sent to your callback url is a **POST** request with the following parameters:  *Example:*      currency:         \&quot;BTC\&quot;     paymentId:        \&quot;698fd3f6-5482-4798-8a46-6732af440616\&quot;     address:          \&quot;3KoUDMfrov91G4SXaCKGvTWDjGia9Jod5b\&quot;     type:             0     partialAmount:    \&quot;0.00\&quot;                       //Partial amount received when payment is incomplete     remainingAmount:  \&quot;0.00\&quot;                       //Remaining amount to pay when payment is incomplete     amount:           \&quot;0.1\&quot;     feePct:           0.90     feeAmount:        \&quot;0.0009\&quot;     finalAmount:      \&quot;0.0991\&quot;     destination:      \&quot;698fd3f6-5482-4798-8a46-6732af440616\&quot;     reference:        \&quot;12345\&quot;     status:           2 
        /// </remarks>
        /// <exception cref="payrobot.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Object Currency:   * &#x60;btc&#x60;: Bitcoin   * &#x60;ltc&#x60;: Litecoin   * &#x60;bch&#x60;: Bitcoin Cash </param>
        /// <param name="type">* &#x60;0: Receive and forward&#x60; payment is forwarded to a desired coin address once it&#39;s confirmed  * &#x60;1: Receive and store&#x60; payment is stored in a payrobot.io wallet </param>
        /// <param name="destination">* For &#x60;Receive and forward&#x60; payment is the &#x60;ADDRESS&#x60; where the payment is going to be forwarded as soon as it&#39;s confirmed. **ADDRESS HAS TO BE OF THE SAME TYPE OF CURRENCY**  * For &#x60;Receive and store&#x60; payment is the payrobot.io &#x60;WALLET ID&#x60; where the payment is going to be stored as soon as it&#39;s confirmed. **WALLET HAS TO BE OF THE SAME TYPE OF CURRENCY** </param>
        /// <param name="amount">Amount of the payment</param>
        /// <param name="callback">Your URL where payrobot.io will send the status of the payment (Webhook)</param>
        /// <param name="reference">Optional custom reference to identify the payment (optional)</param>
        /// <returns>Task of PaymentRequest</returns>
        System.Threading.Tasks.Task<PaymentRequest> CreatePaymentAsync (string currency, int type, string destination, decimal amount, string callback, string reference = default(string));

        /// <summary>
        /// Generate a new one-use address to receive a payment
        /// </summary>
        /// <remarks>
        /// Generates a new one-use address to receive a payment. It callbacks your web/app server as soon as it&#39;s paid and confirmed.  **Payment can be &#x60;forwarded&#x60; to another address or it can be &#x60;stored&#x60; in a payrobot.io wallet**     - -- ## Important    * Unpaid requests are deleted after **3 hours** of theirs creation   * Confirmed payments information is deleted after **3 days** of being confirmed    - -- ## Minimum Amounts     * &#x60;Bitcoin&#x60;: 0.0001 BTC   * &#x60;Litecoin&#x60;: 0.001 LTC   * &#x60;Bitcoin Cash&#x60;: 0.001 BCH    - -- ## Callbacks A **payment notificacion** will be sent to your callback url in the following scenarios:    1. *Payment is received partially*   2. *Payment is being confirmed by network*   3. *Payment is confirmed at least with 1 confirmation*   The callback sent to your callback url is a **POST** request with the following parameters:  *Example:*      currency:         \&quot;BTC\&quot;     paymentId:        \&quot;698fd3f6-5482-4798-8a46-6732af440616\&quot;     address:          \&quot;3KoUDMfrov91G4SXaCKGvTWDjGia9Jod5b\&quot;     type:             0     partialAmount:    \&quot;0.00\&quot;                       //Partial amount received when payment is incomplete     remainingAmount:  \&quot;0.00\&quot;                       //Remaining amount to pay when payment is incomplete     amount:           \&quot;0.1\&quot;     feePct:           0.90     feeAmount:        \&quot;0.0009\&quot;     finalAmount:      \&quot;0.0991\&quot;     destination:      \&quot;698fd3f6-5482-4798-8a46-6732af440616\&quot;     reference:        \&quot;12345\&quot;     status:           2 
        /// </remarks>
        /// <exception cref="payrobot.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Object Currency:   * &#x60;btc&#x60;: Bitcoin   * &#x60;ltc&#x60;: Litecoin   * &#x60;bch&#x60;: Bitcoin Cash </param>
        /// <param name="type">* &#x60;0: Receive and forward&#x60; payment is forwarded to a desired coin address once it&#39;s confirmed  * &#x60;1: Receive and store&#x60; payment is stored in a payrobot.io wallet </param>
        /// <param name="destination">* For &#x60;Receive and forward&#x60; payment is the &#x60;ADDRESS&#x60; where the payment is going to be forwarded as soon as it&#39;s confirmed. **ADDRESS HAS TO BE OF THE SAME TYPE OF CURRENCY**  * For &#x60;Receive and store&#x60; payment is the payrobot.io &#x60;WALLET ID&#x60; where the payment is going to be stored as soon as it&#39;s confirmed. **WALLET HAS TO BE OF THE SAME TYPE OF CURRENCY** </param>
        /// <param name="amount">Amount of the payment</param>
        /// <param name="callback">Your URL where payrobot.io will send the status of the payment (Webhook)</param>
        /// <param name="reference">Optional custom reference to identify the payment (optional)</param>
        /// <returns>Task of ApiResponse (PaymentRequest)</returns>
        System.Threading.Tasks.Task<ApiResponse<PaymentRequest>> CreatePaymentAsyncWithHttpInfo (string currency, int type, string destination, decimal amount, string callback, string reference = default(string));
        /// <summary>
        /// Get detailed information about a payment
        /// </summary>
        /// <remarks>
        /// Gets detailed information about a payment
        /// </remarks>
        /// <exception cref="payrobot.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Object Currency:   * &#x60;btc&#x60;: Bitcoin   * &#x60;ltc&#x60;: Litecoin   * &#x60;bch&#x60;: Bitcoin Cash </param>
        /// <param name="paymentId">Payment ID to query</param>
        /// <returns>Task of PaymentRequest</returns>
        System.Threading.Tasks.Task<PaymentRequest> GetPaymentAsync (string currency, string paymentId);

        /// <summary>
        /// Get detailed information about a payment
        /// </summary>
        /// <remarks>
        /// Gets detailed information about a payment
        /// </remarks>
        /// <exception cref="payrobot.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Object Currency:   * &#x60;btc&#x60;: Bitcoin   * &#x60;ltc&#x60;: Litecoin   * &#x60;bch&#x60;: Bitcoin Cash </param>
        /// <param name="paymentId">Payment ID to query</param>
        /// <returns>Task of ApiResponse (PaymentRequest)</returns>
        System.Threading.Tasks.Task<ApiResponse<PaymentRequest>> GetPaymentAsyncWithHttpInfo (string currency, string paymentId);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class PaymentApi : IPaymentApi
    {
        private payrobot.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="PaymentApi"/> class.
        /// </summary>
        /// <returns></returns>
        public PaymentApi(String basePath)
        {
            this.Configuration = new payrobot.Client.Configuration { BasePath = basePath };

            ExceptionFactory = payrobot.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PaymentApi"/> class
        /// </summary>
        /// <returns></returns>
        public PaymentApi()
        {
            this.Configuration = payrobot.Client.Configuration.Default;

            ExceptionFactory = payrobot.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PaymentApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public PaymentApi(payrobot.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = payrobot.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = payrobot.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public payrobot.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public payrobot.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Generate a new one-use address to receive a payment Generates a new one-use address to receive a payment. It callbacks your web/app server as soon as it&#39;s paid and confirmed.  **Payment can be &#x60;forwarded&#x60; to another address or it can be &#x60;stored&#x60; in a payrobot.io wallet**     - -- ## Important    * Unpaid requests are deleted after **3 hours** of theirs creation   * Confirmed payments information is deleted after **3 days** of being confirmed    - -- ## Minimum Amounts     * &#x60;Bitcoin&#x60;: 0.0001 BTC   * &#x60;Litecoin&#x60;: 0.001 LTC   * &#x60;Bitcoin Cash&#x60;: 0.001 BCH    - -- ## Callbacks A **payment notificacion** will be sent to your callback url in the following scenarios:    1. *Payment is received partially*   2. *Payment is being confirmed by network*   3. *Payment is confirmed at least with 1 confirmation*   The callback sent to your callback url is a **POST** request with the following parameters:  *Example:*      currency:         \&quot;BTC\&quot;     paymentId:        \&quot;698fd3f6-5482-4798-8a46-6732af440616\&quot;     address:          \&quot;3KoUDMfrov91G4SXaCKGvTWDjGia9Jod5b\&quot;     type:             0     partialAmount:    \&quot;0.00\&quot;                       //Partial amount received when payment is incomplete     remainingAmount:  \&quot;0.00\&quot;                       //Remaining amount to pay when payment is incomplete     amount:           \&quot;0.1\&quot;     feePct:           0.90     feeAmount:        \&quot;0.0009\&quot;     finalAmount:      \&quot;0.0991\&quot;     destination:      \&quot;698fd3f6-5482-4798-8a46-6732af440616\&quot;     reference:        \&quot;12345\&quot;     status:           2 
        /// </summary>
        /// <exception cref="payrobot.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Object Currency:   * &#x60;btc&#x60;: Bitcoin   * &#x60;ltc&#x60;: Litecoin   * &#x60;bch&#x60;: Bitcoin Cash </param>
        /// <param name="type">* &#x60;0: Receive and forward&#x60; payment is forwarded to a desired coin address once it&#39;s confirmed  * &#x60;1: Receive and store&#x60; payment is stored in a payrobot.io wallet </param>
        /// <param name="destination">* For &#x60;Receive and forward&#x60; payment is the &#x60;ADDRESS&#x60; where the payment is going to be forwarded as soon as it&#39;s confirmed. **ADDRESS HAS TO BE OF THE SAME TYPE OF CURRENCY**  * For &#x60;Receive and store&#x60; payment is the payrobot.io &#x60;WALLET ID&#x60; where the payment is going to be stored as soon as it&#39;s confirmed. **WALLET HAS TO BE OF THE SAME TYPE OF CURRENCY** </param>
        /// <param name="amount">Amount of the payment</param>
        /// <param name="callback">Your URL where payrobot.io will send the status of the payment (Webhook)</param>
        /// <param name="reference">Optional custom reference to identify the payment (optional)</param>
        /// <returns>PaymentRequest</returns>
        public PaymentRequest CreatePayment (string currency, int type, string destination, decimal amount, string callback, string reference = default(string))
        {
             ApiResponse<PaymentRequest> localVarResponse = CreatePaymentWithHttpInfo(currency, type, destination, amount, callback, reference);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Generate a new one-use address to receive a payment Generates a new one-use address to receive a payment. It callbacks your web/app server as soon as it&#39;s paid and confirmed.  **Payment can be &#x60;forwarded&#x60; to another address or it can be &#x60;stored&#x60; in a payrobot.io wallet**     - -- ## Important    * Unpaid requests are deleted after **3 hours** of theirs creation   * Confirmed payments information is deleted after **3 days** of being confirmed    - -- ## Minimum Amounts     * &#x60;Bitcoin&#x60;: 0.0001 BTC   * &#x60;Litecoin&#x60;: 0.001 LTC   * &#x60;Bitcoin Cash&#x60;: 0.001 BCH    - -- ## Callbacks A **payment notificacion** will be sent to your callback url in the following scenarios:    1. *Payment is received partially*   2. *Payment is being confirmed by network*   3. *Payment is confirmed at least with 1 confirmation*   The callback sent to your callback url is a **POST** request with the following parameters:  *Example:*      currency:         \&quot;BTC\&quot;     paymentId:        \&quot;698fd3f6-5482-4798-8a46-6732af440616\&quot;     address:          \&quot;3KoUDMfrov91G4SXaCKGvTWDjGia9Jod5b\&quot;     type:             0     partialAmount:    \&quot;0.00\&quot;                       //Partial amount received when payment is incomplete     remainingAmount:  \&quot;0.00\&quot;                       //Remaining amount to pay when payment is incomplete     amount:           \&quot;0.1\&quot;     feePct:           0.90     feeAmount:        \&quot;0.0009\&quot;     finalAmount:      \&quot;0.0991\&quot;     destination:      \&quot;698fd3f6-5482-4798-8a46-6732af440616\&quot;     reference:        \&quot;12345\&quot;     status:           2 
        /// </summary>
        /// <exception cref="payrobot.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Object Currency:   * &#x60;btc&#x60;: Bitcoin   * &#x60;ltc&#x60;: Litecoin   * &#x60;bch&#x60;: Bitcoin Cash </param>
        /// <param name="type">* &#x60;0: Receive and forward&#x60; payment is forwarded to a desired coin address once it&#39;s confirmed  * &#x60;1: Receive and store&#x60; payment is stored in a payrobot.io wallet </param>
        /// <param name="destination">* For &#x60;Receive and forward&#x60; payment is the &#x60;ADDRESS&#x60; where the payment is going to be forwarded as soon as it&#39;s confirmed. **ADDRESS HAS TO BE OF THE SAME TYPE OF CURRENCY**  * For &#x60;Receive and store&#x60; payment is the payrobot.io &#x60;WALLET ID&#x60; where the payment is going to be stored as soon as it&#39;s confirmed. **WALLET HAS TO BE OF THE SAME TYPE OF CURRENCY** </param>
        /// <param name="amount">Amount of the payment</param>
        /// <param name="callback">Your URL where payrobot.io will send the status of the payment (Webhook)</param>
        /// <param name="reference">Optional custom reference to identify the payment (optional)</param>
        /// <returns>ApiResponse of PaymentRequest</returns>
        public ApiResponse<PaymentRequest> CreatePaymentWithHttpInfo (string currency, int type, string destination, decimal amount, string callback, string reference = default(string))
        {
            // verify the required parameter 'currency' is set
            if (currency == null)
                throw new ApiException(400, "Missing required parameter 'currency' when calling PaymentApi->CreatePayment");
            // verify the required parameter 'type' is set
            if (type == null)
                throw new ApiException(400, "Missing required parameter 'type' when calling PaymentApi->CreatePayment");
            // verify the required parameter 'destination' is set
            if (destination == null)
                throw new ApiException(400, "Missing required parameter 'destination' when calling PaymentApi->CreatePayment");
            // verify the required parameter 'amount' is set
            if (amount == null)
                throw new ApiException(400, "Missing required parameter 'amount' when calling PaymentApi->CreatePayment");
            // verify the required parameter 'callback' is set
            if (callback == null)
                throw new ApiException(400, "Missing required parameter 'callback' when calling PaymentApi->CreatePayment");

            var localVarPath = "/{currency}/payments";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (currency != null) localVarPathParams.Add("currency", this.Configuration.ApiClient.ParameterToString(currency)); // path parameter
            if (type != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "type", type)); // query parameter
            if (destination != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "destination", destination)); // query parameter
            if (amount != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "amount", amount)); // query parameter
            if (callback != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "callback", callback)); // query parameter
            if (reference != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "reference", reference)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreatePayment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PaymentRequest>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (PaymentRequest) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PaymentRequest)));
        }

        /// <summary>
        /// Generate a new one-use address to receive a payment Generates a new one-use address to receive a payment. It callbacks your web/app server as soon as it&#39;s paid and confirmed.  **Payment can be &#x60;forwarded&#x60; to another address or it can be &#x60;stored&#x60; in a payrobot.io wallet**     - -- ## Important    * Unpaid requests are deleted after **3 hours** of theirs creation   * Confirmed payments information is deleted after **3 days** of being confirmed    - -- ## Minimum Amounts     * &#x60;Bitcoin&#x60;: 0.0001 BTC   * &#x60;Litecoin&#x60;: 0.001 LTC   * &#x60;Bitcoin Cash&#x60;: 0.001 BCH    - -- ## Callbacks A **payment notificacion** will be sent to your callback url in the following scenarios:    1. *Payment is received partially*   2. *Payment is being confirmed by network*   3. *Payment is confirmed at least with 1 confirmation*   The callback sent to your callback url is a **POST** request with the following parameters:  *Example:*      currency:         \&quot;BTC\&quot;     paymentId:        \&quot;698fd3f6-5482-4798-8a46-6732af440616\&quot;     address:          \&quot;3KoUDMfrov91G4SXaCKGvTWDjGia9Jod5b\&quot;     type:             0     partialAmount:    \&quot;0.00\&quot;                       //Partial amount received when payment is incomplete     remainingAmount:  \&quot;0.00\&quot;                       //Remaining amount to pay when payment is incomplete     amount:           \&quot;0.1\&quot;     feePct:           0.90     feeAmount:        \&quot;0.0009\&quot;     finalAmount:      \&quot;0.0991\&quot;     destination:      \&quot;698fd3f6-5482-4798-8a46-6732af440616\&quot;     reference:        \&quot;12345\&quot;     status:           2 
        /// </summary>
        /// <exception cref="payrobot.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Object Currency:   * &#x60;btc&#x60;: Bitcoin   * &#x60;ltc&#x60;: Litecoin   * &#x60;bch&#x60;: Bitcoin Cash </param>
        /// <param name="type">* &#x60;0: Receive and forward&#x60; payment is forwarded to a desired coin address once it&#39;s confirmed  * &#x60;1: Receive and store&#x60; payment is stored in a payrobot.io wallet </param>
        /// <param name="destination">* For &#x60;Receive and forward&#x60; payment is the &#x60;ADDRESS&#x60; where the payment is going to be forwarded as soon as it&#39;s confirmed. **ADDRESS HAS TO BE OF THE SAME TYPE OF CURRENCY**  * For &#x60;Receive and store&#x60; payment is the payrobot.io &#x60;WALLET ID&#x60; where the payment is going to be stored as soon as it&#39;s confirmed. **WALLET HAS TO BE OF THE SAME TYPE OF CURRENCY** </param>
        /// <param name="amount">Amount of the payment</param>
        /// <param name="callback">Your URL where payrobot.io will send the status of the payment (Webhook)</param>
        /// <param name="reference">Optional custom reference to identify the payment (optional)</param>
        /// <returns>Task of PaymentRequest</returns>
        public async System.Threading.Tasks.Task<PaymentRequest> CreatePaymentAsync (string currency, int type, string destination, decimal amount, string callback, string reference = default(string))
        {
             ApiResponse<PaymentRequest> localVarResponse = await CreatePaymentAsyncWithHttpInfo(currency, type, destination, amount, callback, reference);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Generate a new one-use address to receive a payment Generates a new one-use address to receive a payment. It callbacks your web/app server as soon as it&#39;s paid and confirmed.  **Payment can be &#x60;forwarded&#x60; to another address or it can be &#x60;stored&#x60; in a payrobot.io wallet**     - -- ## Important    * Unpaid requests are deleted after **3 hours** of theirs creation   * Confirmed payments information is deleted after **3 days** of being confirmed    - -- ## Minimum Amounts     * &#x60;Bitcoin&#x60;: 0.0001 BTC   * &#x60;Litecoin&#x60;: 0.001 LTC   * &#x60;Bitcoin Cash&#x60;: 0.001 BCH    - -- ## Callbacks A **payment notificacion** will be sent to your callback url in the following scenarios:    1. *Payment is received partially*   2. *Payment is being confirmed by network*   3. *Payment is confirmed at least with 1 confirmation*   The callback sent to your callback url is a **POST** request with the following parameters:  *Example:*      currency:         \&quot;BTC\&quot;     paymentId:        \&quot;698fd3f6-5482-4798-8a46-6732af440616\&quot;     address:          \&quot;3KoUDMfrov91G4SXaCKGvTWDjGia9Jod5b\&quot;     type:             0     partialAmount:    \&quot;0.00\&quot;                       //Partial amount received when payment is incomplete     remainingAmount:  \&quot;0.00\&quot;                       //Remaining amount to pay when payment is incomplete     amount:           \&quot;0.1\&quot;     feePct:           0.90     feeAmount:        \&quot;0.0009\&quot;     finalAmount:      \&quot;0.0991\&quot;     destination:      \&quot;698fd3f6-5482-4798-8a46-6732af440616\&quot;     reference:        \&quot;12345\&quot;     status:           2 
        /// </summary>
        /// <exception cref="payrobot.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Object Currency:   * &#x60;btc&#x60;: Bitcoin   * &#x60;ltc&#x60;: Litecoin   * &#x60;bch&#x60;: Bitcoin Cash </param>
        /// <param name="type">* &#x60;0: Receive and forward&#x60; payment is forwarded to a desired coin address once it&#39;s confirmed  * &#x60;1: Receive and store&#x60; payment is stored in a payrobot.io wallet </param>
        /// <param name="destination">* For &#x60;Receive and forward&#x60; payment is the &#x60;ADDRESS&#x60; where the payment is going to be forwarded as soon as it&#39;s confirmed. **ADDRESS HAS TO BE OF THE SAME TYPE OF CURRENCY**  * For &#x60;Receive and store&#x60; payment is the payrobot.io &#x60;WALLET ID&#x60; where the payment is going to be stored as soon as it&#39;s confirmed. **WALLET HAS TO BE OF THE SAME TYPE OF CURRENCY** </param>
        /// <param name="amount">Amount of the payment</param>
        /// <param name="callback">Your URL where payrobot.io will send the status of the payment (Webhook)</param>
        /// <param name="reference">Optional custom reference to identify the payment (optional)</param>
        /// <returns>Task of ApiResponse (PaymentRequest)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PaymentRequest>> CreatePaymentAsyncWithHttpInfo (string currency, int type, string destination, decimal amount, string callback, string reference = default(string))
        {
            // verify the required parameter 'currency' is set
            if (currency == null)
                throw new ApiException(400, "Missing required parameter 'currency' when calling PaymentApi->CreatePayment");
            // verify the required parameter 'type' is set
            if (type == null)
                throw new ApiException(400, "Missing required parameter 'type' when calling PaymentApi->CreatePayment");
            // verify the required parameter 'destination' is set
            if (destination == null)
                throw new ApiException(400, "Missing required parameter 'destination' when calling PaymentApi->CreatePayment");
            // verify the required parameter 'amount' is set
            if (amount == null)
                throw new ApiException(400, "Missing required parameter 'amount' when calling PaymentApi->CreatePayment");
            // verify the required parameter 'callback' is set
            if (callback == null)
                throw new ApiException(400, "Missing required parameter 'callback' when calling PaymentApi->CreatePayment");

            var localVarPath = "/{currency}/payments";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (currency != null) localVarPathParams.Add("currency", this.Configuration.ApiClient.ParameterToString(currency)); // path parameter
            if (type != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "type", type)); // query parameter
            if (destination != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "destination", destination)); // query parameter
            if (amount != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "amount", amount)); // query parameter
            if (callback != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "callback", callback)); // query parameter
            if (reference != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "reference", reference)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreatePayment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PaymentRequest>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (PaymentRequest) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PaymentRequest)));
        }

        /// <summary>
        /// Get detailed information about a payment Gets detailed information about a payment
        /// </summary>
        /// <exception cref="payrobot.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Object Currency:   * &#x60;btc&#x60;: Bitcoin   * &#x60;ltc&#x60;: Litecoin   * &#x60;bch&#x60;: Bitcoin Cash </param>
        /// <param name="paymentId">Payment ID to query</param>
        /// <returns>PaymentRequest</returns>
        public PaymentRequest GetPayment (string currency, string paymentId)
        {
             ApiResponse<PaymentRequest> localVarResponse = GetPaymentWithHttpInfo(currency, paymentId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get detailed information about a payment Gets detailed information about a payment
        /// </summary>
        /// <exception cref="payrobot.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Object Currency:   * &#x60;btc&#x60;: Bitcoin   * &#x60;ltc&#x60;: Litecoin   * &#x60;bch&#x60;: Bitcoin Cash </param>
        /// <param name="paymentId">Payment ID to query</param>
        /// <returns>ApiResponse of PaymentRequest</returns>
        public ApiResponse<PaymentRequest> GetPaymentWithHttpInfo (string currency, string paymentId)
        {
            // verify the required parameter 'currency' is set
            if (currency == null)
                throw new ApiException(400, "Missing required parameter 'currency' when calling PaymentApi->GetPayment");
            // verify the required parameter 'paymentId' is set
            if (paymentId == null)
                throw new ApiException(400, "Missing required parameter 'paymentId' when calling PaymentApi->GetPayment");

            var localVarPath = "/{currency}/payments/{paymentId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (currency != null) localVarPathParams.Add("currency", this.Configuration.ApiClient.ParameterToString(currency)); // path parameter
            if (paymentId != null) localVarPathParams.Add("paymentId", this.Configuration.ApiClient.ParameterToString(paymentId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPayment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PaymentRequest>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (PaymentRequest) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PaymentRequest)));
        }

        /// <summary>
        /// Get detailed information about a payment Gets detailed information about a payment
        /// </summary>
        /// <exception cref="payrobot.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Object Currency:   * &#x60;btc&#x60;: Bitcoin   * &#x60;ltc&#x60;: Litecoin   * &#x60;bch&#x60;: Bitcoin Cash </param>
        /// <param name="paymentId">Payment ID to query</param>
        /// <returns>Task of PaymentRequest</returns>
        public async System.Threading.Tasks.Task<PaymentRequest> GetPaymentAsync (string currency, string paymentId)
        {
             ApiResponse<PaymentRequest> localVarResponse = await GetPaymentAsyncWithHttpInfo(currency, paymentId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get detailed information about a payment Gets detailed information about a payment
        /// </summary>
        /// <exception cref="payrobot.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Object Currency:   * &#x60;btc&#x60;: Bitcoin   * &#x60;ltc&#x60;: Litecoin   * &#x60;bch&#x60;: Bitcoin Cash </param>
        /// <param name="paymentId">Payment ID to query</param>
        /// <returns>Task of ApiResponse (PaymentRequest)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PaymentRequest>> GetPaymentAsyncWithHttpInfo (string currency, string paymentId)
        {
            // verify the required parameter 'currency' is set
            if (currency == null)
                throw new ApiException(400, "Missing required parameter 'currency' when calling PaymentApi->GetPayment");
            // verify the required parameter 'paymentId' is set
            if (paymentId == null)
                throw new ApiException(400, "Missing required parameter 'paymentId' when calling PaymentApi->GetPayment");

            var localVarPath = "/{currency}/payments/{paymentId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (currency != null) localVarPathParams.Add("currency", this.Configuration.ApiClient.ParameterToString(currency)); // path parameter
            if (paymentId != null) localVarPathParams.Add("paymentId", this.Configuration.ApiClient.ParameterToString(paymentId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPayment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PaymentRequest>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (PaymentRequest) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PaymentRequest)));
        }

    }
}
