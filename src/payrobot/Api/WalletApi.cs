/* 
 * Payrobot
 *
 * # Introduction Accept, store, send or forward Bitcoin, Litecoin and Bitcoin Cash for your website or app and protect your privacy.  Supported crytocurrencies:   * BTC Bitcoin   * LTC Litecoin   * BCH Bitcoin Cash   ## Benefits    * **Anonymous** No personal details are required and transactions are mixed among all payments. You can forward your payments so as soon payrobot.io receives it forwards it to another address under your control.      * **No Registration** No registration, sign-up, application or form required to use payrobot.io      * **Easy Integration** Integrate your web / app through our simple RESTful API, you can accept payments with just one line of code!      * **Instant Payment Notification** Our servers notify your web / app the status of your payments. No polling, daemons or cronjobs required on your side!      * **Secure** Payrobot.io works with SSL and bank-level security protocols. Your transactions are safe!   ## Features **Payment Forward** Generate one-time addresses to recieve payments. Payrobot will notify your web /app through callbacks (webhooks) the status of the payment. As soon as it's confirmed the payment is forwarded to your desired address.  **Wallet** Receive, send payments and store your coins in a secure, private and anonymous wallet. All events are notified to your web / app through callbacks (webhooks). You can generate wallets with just one line of code without registration or further information  ## Fees **Only 0.90% per inbound transaction** (receive payments), NO HIDDEN FEES. All outbound transactions (send funds) are totally free.  Minimum fees applies, therefore the largest amount is going to be considered as fee either: `(inboundAmount*feePct)` or `the minimum fee`  **Inbound Fees (Receive payments)**    - `Bitcoin` 0.90% *(Minimum fee 0.00005 BTC)*   - `Litecoin` 0.90% *(Minimum fee 0.0005 LTC)*   - `Bitcoin Cash` 0.90% *(Minimum fee 0.0005 BCH)*     **Outbound Fees (Send funds)**    - `Bitcoin` 0.00%   - `Litecoin` 0.00%   - `Bitcoin Cash` 0.00%   ## Rate Limit To guarantee the good performance of the service and its fair use. The API is **limited to receiving 120 requests per minute per IP**, which is sufficient for most use cases.  Payrobot.io is asynchronous in most API methods to communicate with your application through callbacks (webhooks), thus reducing unnecessary calls to the service.  **If the limit is exceeded, the IP will be banned for 1 minute.**  If you require an upper limit for your application, do not hesitate to contact us  ## Considerations    * Amounts in responses are expresed as `strings`      * Wallets are not multi-currency, you have to create a different wallet per cryptocurrency (You can't store Litecoin in a Bitcoin wallet and vice-versa)      * Payment forwarding has to be of the same type of currency (You can't forward a Bitcoin Cash payment to a Bitcoin address and vice-versa)    
 *
 * The version of the OpenAPI document: 1.0
 * Contact: contact@payrobot.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using payrobot.Client;
using payrobot.Model;

namespace payrobot.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IWalletApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create new wallet
        /// </summary>
        /// <remarks>
        /// Creates a new wallet where you can receive, store and send funds for your web or app.  - -- ## Important This method returns your &#x60;Wallet Passphrase&#x60;, it will be required when you send funds from your wallet. **Please keep it safe and private** 
        /// </remarks>
        /// <exception cref="payrobot.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Object Currency:   * &#x60;btc&#x60;: Bitcoin   * &#x60;ltc&#x60;: Litecoin   * &#x60;bch&#x60;: Bitcoin Cash </param>
        /// <returns>WalletCreationInfo</returns>
        WalletCreationInfo CreateWallet (string currency);

        /// <summary>
        /// Create new wallet
        /// </summary>
        /// <remarks>
        /// Creates a new wallet where you can receive, store and send funds for your web or app.  - -- ## Important This method returns your &#x60;Wallet Passphrase&#x60;, it will be required when you send funds from your wallet. **Please keep it safe and private** 
        /// </remarks>
        /// <exception cref="payrobot.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Object Currency:   * &#x60;btc&#x60;: Bitcoin   * &#x60;ltc&#x60;: Litecoin   * &#x60;bch&#x60;: Bitcoin Cash </param>
        /// <returns>ApiResponse of WalletCreationInfo</returns>
        ApiResponse<WalletCreationInfo> CreateWalletWithHttpInfo (string currency);
        /// <summary>
        /// Send funds from a wallet
        /// </summary>
        /// <remarks>
        /// Sends funds from a wallet to one or multiple addresses.  - -- ## Required Authorization Token This transaction requires an authorization &#x60;token&#x60; which is the result of the &#x60;sha-256&#x60; hash of the following string:        walletId~destination~seed~walletPassphrase    **For example**  Considering the following example values for the token:   - &#x60;walletId&#x60; 9df3f909-088d-4724-b34f-9a587c5ccc15   - &#x60;destination&#x60;     [{\&quot;address\&quot;:\&quot;bc1q5defveu0acrf87m3huwxjq6pqaszdjf3d4ej9y\&quot;,\&quot;amount\&quot;:0.01},{\&quot;address\&quot;:\&quot;bc1qs59a7e23zpjm0znteytrxvj839dlp205e50zch\&quot;,\&quot;amount\&quot;:0.056}]     - &#x60;seed&#x60; 758748394   - &#x60;walletPassphrase&#x60; **Note: this was provided when you created the wallet** OHh6IIININmfmjGGsxlBBft2ch61VncaPscsp295h2ULx9xPY07Jom3d5cBifgoW    The resulting string, previous to hash is::        9df3f909-088d-4724-b34f-9a587c5ccc15~[{\&quot;address\&quot;:\&quot;bc1q5defveu0acrf87m3huwxjq6pqaszdjf3d4ej9y\&quot;,\&quot;amount\&quot;:0.01},{\&quot;address\&quot;:\&quot;bc1qs59a7e23zpjm0znteytrxvj839dlp205e50zch\&quot;,\&quot;amount\&quot;:0.056}]~758748394~OHh6IIININmfmjGGsxlBBft2ch61VncaPscsp295h2ULx9xPY07Jom3d5cBifgoW    Finally after applying &#x60;sha-256&#x60; hash, we obtain the required &#x60;token&#x60;:        804ca9457b0fe3e4d243fe9e39e760ff1f287491ae8e79d015f92f7c6c96d7b1       - -- ## Important    * Send requests are commonly queued, optionally you can specify a callback to get your web / app notified as soon as the request has been fully broadcasted to the Network.    * Transaction is limited to &#x60;25&#x60; destination addresses per request      * Tx Hash is provided only through the callback      * Confirmed send requests information is &#x60;DELETED&#x60; after &#x60;3 days&#x60; of being confirmed    - -- ## Minimum Send Amounts     * &#x60;Bitcoin&#x60;: 0.0001 BTC   * &#x60;Litecoin&#x60;: 0.001 LTC   * &#x60;Bitcoin Cash&#x60;: 0.001 BCH    - -- ## Callback Send requests are commonly queued, optionally you can specify a callback to get your web / app notified as soon as the request has been fully broadcasted to the Network.  The callback sent to your callback url is a **POST** request with the following parameters:       *Example:*      currency:     \&quot;BTC\&quot;     walletId:     \&quot;698fd3f6-5482-4798-8a46-6732af440616\&quot;     requestId:    \&quot;123fd3f6-9078-5790-4f40-6932bf440120\&quot;     timestamp:    1577179288     lastupdate:   1577179388     amount:       \&quot;0.01\&quot;     callback:     \&quot;https://callback-url.com\&quot;     destination:  &#39;[{\&quot;address\&quot;: \&quot;bc1qf6ss0qtdn5q42...\&quot;                   \&quot;amount\&quot;: \&quot;0.01\&quot;}]&#39;     txid:         \&quot;2cdac43e92e65cb428e3ed992bcf61347...\&quot;     status:       0 
        /// </remarks>
        /// <exception cref="payrobot.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Object Currency:   * &#x60;btc&#x60;: Bitcoin   * &#x60;ltc&#x60;: Litecoin   * &#x60;bch&#x60;: Bitcoin Cash </param>
        /// <param name="walletId">Wallet where funds to send are stored</param>
        /// <param name="destination">JSON formatted array with all the destination addres(es) and the amount(s) to send\\ &#x60;[{\&quot;address\&quot;:\&quot;desired-destination-address\&quot;,\&quot;amount\&quot;:X.XXXXXXXX}, ...]&#x60; </param>
        /// <param name="seed">Unique random string generated by your web/app. **IT MUST BE UNIQUE PER TRANSACTION PER WALLET**</param>
        /// <param name="token">SHA-256 hash of the concatenated string (substituting with the proper data):\\ &#x60;walletId~destination~seed~walletPassphrase&#x60; </param>
        /// <param name="callback">Optional callback to notify your web / app as soon as the send request has been fully broadcasted to the Network (optional)</param>
        /// <returns>WalletSendRequest</returns>
        WalletSendRequest CreateWalletSendRequest (string currency, string walletId, string destination, string seed, string token, string callback = default(string));

        /// <summary>
        /// Send funds from a wallet
        /// </summary>
        /// <remarks>
        /// Sends funds from a wallet to one or multiple addresses.  - -- ## Required Authorization Token This transaction requires an authorization &#x60;token&#x60; which is the result of the &#x60;sha-256&#x60; hash of the following string:        walletId~destination~seed~walletPassphrase    **For example**  Considering the following example values for the token:   - &#x60;walletId&#x60; 9df3f909-088d-4724-b34f-9a587c5ccc15   - &#x60;destination&#x60;     [{\&quot;address\&quot;:\&quot;bc1q5defveu0acrf87m3huwxjq6pqaszdjf3d4ej9y\&quot;,\&quot;amount\&quot;:0.01},{\&quot;address\&quot;:\&quot;bc1qs59a7e23zpjm0znteytrxvj839dlp205e50zch\&quot;,\&quot;amount\&quot;:0.056}]     - &#x60;seed&#x60; 758748394   - &#x60;walletPassphrase&#x60; **Note: this was provided when you created the wallet** OHh6IIININmfmjGGsxlBBft2ch61VncaPscsp295h2ULx9xPY07Jom3d5cBifgoW    The resulting string, previous to hash is::        9df3f909-088d-4724-b34f-9a587c5ccc15~[{\&quot;address\&quot;:\&quot;bc1q5defveu0acrf87m3huwxjq6pqaszdjf3d4ej9y\&quot;,\&quot;amount\&quot;:0.01},{\&quot;address\&quot;:\&quot;bc1qs59a7e23zpjm0znteytrxvj839dlp205e50zch\&quot;,\&quot;amount\&quot;:0.056}]~758748394~OHh6IIININmfmjGGsxlBBft2ch61VncaPscsp295h2ULx9xPY07Jom3d5cBifgoW    Finally after applying &#x60;sha-256&#x60; hash, we obtain the required &#x60;token&#x60;:        804ca9457b0fe3e4d243fe9e39e760ff1f287491ae8e79d015f92f7c6c96d7b1       - -- ## Important    * Send requests are commonly queued, optionally you can specify a callback to get your web / app notified as soon as the request has been fully broadcasted to the Network.    * Transaction is limited to &#x60;25&#x60; destination addresses per request      * Tx Hash is provided only through the callback      * Confirmed send requests information is &#x60;DELETED&#x60; after &#x60;3 days&#x60; of being confirmed    - -- ## Minimum Send Amounts     * &#x60;Bitcoin&#x60;: 0.0001 BTC   * &#x60;Litecoin&#x60;: 0.001 LTC   * &#x60;Bitcoin Cash&#x60;: 0.001 BCH    - -- ## Callback Send requests are commonly queued, optionally you can specify a callback to get your web / app notified as soon as the request has been fully broadcasted to the Network.  The callback sent to your callback url is a **POST** request with the following parameters:       *Example:*      currency:     \&quot;BTC\&quot;     walletId:     \&quot;698fd3f6-5482-4798-8a46-6732af440616\&quot;     requestId:    \&quot;123fd3f6-9078-5790-4f40-6932bf440120\&quot;     timestamp:    1577179288     lastupdate:   1577179388     amount:       \&quot;0.01\&quot;     callback:     \&quot;https://callback-url.com\&quot;     destination:  &#39;[{\&quot;address\&quot;: \&quot;bc1qf6ss0qtdn5q42...\&quot;                   \&quot;amount\&quot;: \&quot;0.01\&quot;}]&#39;     txid:         \&quot;2cdac43e92e65cb428e3ed992bcf61347...\&quot;     status:       0 
        /// </remarks>
        /// <exception cref="payrobot.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Object Currency:   * &#x60;btc&#x60;: Bitcoin   * &#x60;ltc&#x60;: Litecoin   * &#x60;bch&#x60;: Bitcoin Cash </param>
        /// <param name="walletId">Wallet where funds to send are stored</param>
        /// <param name="destination">JSON formatted array with all the destination addres(es) and the amount(s) to send\\ &#x60;[{\&quot;address\&quot;:\&quot;desired-destination-address\&quot;,\&quot;amount\&quot;:X.XXXXXXXX}, ...]&#x60; </param>
        /// <param name="seed">Unique random string generated by your web/app. **IT MUST BE UNIQUE PER TRANSACTION PER WALLET**</param>
        /// <param name="token">SHA-256 hash of the concatenated string (substituting with the proper data):\\ &#x60;walletId~destination~seed~walletPassphrase&#x60; </param>
        /// <param name="callback">Optional callback to notify your web / app as soon as the send request has been fully broadcasted to the Network (optional)</param>
        /// <returns>ApiResponse of WalletSendRequest</returns>
        ApiResponse<WalletSendRequest> CreateWalletSendRequestWithHttpInfo (string currency, string walletId, string destination, string seed, string token, string callback = default(string));
        /// <summary>
        /// Get Wallet information
        /// </summary>
        /// <remarks>
        /// Gets detailed information from a Wallet
        /// </remarks>
        /// <exception cref="payrobot.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Object Currency:   * &#x60;btc&#x60;: Bitcoin   * &#x60;ltc&#x60;: Litecoin   * &#x60;bch&#x60;: Bitcoin Cash </param>
        /// <param name="walletId">ID of the desired Wallet</param>
        /// <returns>Wallet</returns>
        Wallet GetWallet (string currency, string walletId);

        /// <summary>
        /// Get Wallet information
        /// </summary>
        /// <remarks>
        /// Gets detailed information from a Wallet
        /// </remarks>
        /// <exception cref="payrobot.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Object Currency:   * &#x60;btc&#x60;: Bitcoin   * &#x60;ltc&#x60;: Litecoin   * &#x60;bch&#x60;: Bitcoin Cash </param>
        /// <param name="walletId">ID of the desired Wallet</param>
        /// <returns>ApiResponse of Wallet</returns>
        ApiResponse<Wallet> GetWalletWithHttpInfo (string currency, string walletId);
        /// <summary>
        /// Get last transactions of wallet
        /// </summary>
        /// <remarks>
        /// Gets last 100 transactions of the wallet
        /// </remarks>
        /// <exception cref="payrobot.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Object Currency:   * &#x60;btc&#x60;: Bitcoin   * &#x60;ltc&#x60;: Litecoin   * &#x60;bch&#x60;: Bitcoin Cash </param>
        /// <param name="walletId">ID of the desired Wallet</param>
        /// <returns>WalletHistory</returns>
        WalletHistory GetWalletHistory (string currency, string walletId);

        /// <summary>
        /// Get last transactions of wallet
        /// </summary>
        /// <remarks>
        /// Gets last 100 transactions of the wallet
        /// </remarks>
        /// <exception cref="payrobot.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Object Currency:   * &#x60;btc&#x60;: Bitcoin   * &#x60;ltc&#x60;: Litecoin   * &#x60;bch&#x60;: Bitcoin Cash </param>
        /// <param name="walletId">ID of the desired Wallet</param>
        /// <returns>ApiResponse of WalletHistory</returns>
        ApiResponse<WalletHistory> GetWalletHistoryWithHttpInfo (string currency, string walletId);
        /// <summary>
        /// Obtain information of a send request
        /// </summary>
        /// <remarks>
        /// Obtains detailed information about a send request
        /// </remarks>
        /// <exception cref="payrobot.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Object Currency:   * &#x60;btc&#x60;: Bitcoin   * &#x60;ltc&#x60;: Litecoin   * &#x60;bch&#x60;: Bitcoin Cash </param>
        /// <param name="walletId">Wallet where funds to send are stored</param>
        /// <param name="requestId">Send Request ID</param>
        /// <returns>WalletSendRequest</returns>
        WalletSendRequest GetWalletSendRequest (string currency, string walletId, string requestId);

        /// <summary>
        /// Obtain information of a send request
        /// </summary>
        /// <remarks>
        /// Obtains detailed information about a send request
        /// </remarks>
        /// <exception cref="payrobot.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Object Currency:   * &#x60;btc&#x60;: Bitcoin   * &#x60;ltc&#x60;: Litecoin   * &#x60;bch&#x60;: Bitcoin Cash </param>
        /// <param name="walletId">Wallet where funds to send are stored</param>
        /// <param name="requestId">Send Request ID</param>
        /// <returns>ApiResponse of WalletSendRequest</returns>
        ApiResponse<WalletSendRequest> GetWalletSendRequestWithHttpInfo (string currency, string walletId, string requestId);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Create new wallet
        /// </summary>
        /// <remarks>
        /// Creates a new wallet where you can receive, store and send funds for your web or app.  - -- ## Important This method returns your &#x60;Wallet Passphrase&#x60;, it will be required when you send funds from your wallet. **Please keep it safe and private** 
        /// </remarks>
        /// <exception cref="payrobot.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Object Currency:   * &#x60;btc&#x60;: Bitcoin   * &#x60;ltc&#x60;: Litecoin   * &#x60;bch&#x60;: Bitcoin Cash </param>
        /// <returns>Task of WalletCreationInfo</returns>
        System.Threading.Tasks.Task<WalletCreationInfo> CreateWalletAsync (string currency);

        /// <summary>
        /// Create new wallet
        /// </summary>
        /// <remarks>
        /// Creates a new wallet where you can receive, store and send funds for your web or app.  - -- ## Important This method returns your &#x60;Wallet Passphrase&#x60;, it will be required when you send funds from your wallet. **Please keep it safe and private** 
        /// </remarks>
        /// <exception cref="payrobot.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Object Currency:   * &#x60;btc&#x60;: Bitcoin   * &#x60;ltc&#x60;: Litecoin   * &#x60;bch&#x60;: Bitcoin Cash </param>
        /// <returns>Task of ApiResponse (WalletCreationInfo)</returns>
        System.Threading.Tasks.Task<ApiResponse<WalletCreationInfo>> CreateWalletAsyncWithHttpInfo (string currency);
        /// <summary>
        /// Send funds from a wallet
        /// </summary>
        /// <remarks>
        /// Sends funds from a wallet to one or multiple addresses.  - -- ## Required Authorization Token This transaction requires an authorization &#x60;token&#x60; which is the result of the &#x60;sha-256&#x60; hash of the following string:        walletId~destination~seed~walletPassphrase    **For example**  Considering the following example values for the token:   - &#x60;walletId&#x60; 9df3f909-088d-4724-b34f-9a587c5ccc15   - &#x60;destination&#x60;     [{\&quot;address\&quot;:\&quot;bc1q5defveu0acrf87m3huwxjq6pqaszdjf3d4ej9y\&quot;,\&quot;amount\&quot;:0.01},{\&quot;address\&quot;:\&quot;bc1qs59a7e23zpjm0znteytrxvj839dlp205e50zch\&quot;,\&quot;amount\&quot;:0.056}]     - &#x60;seed&#x60; 758748394   - &#x60;walletPassphrase&#x60; **Note: this was provided when you created the wallet** OHh6IIININmfmjGGsxlBBft2ch61VncaPscsp295h2ULx9xPY07Jom3d5cBifgoW    The resulting string, previous to hash is::        9df3f909-088d-4724-b34f-9a587c5ccc15~[{\&quot;address\&quot;:\&quot;bc1q5defveu0acrf87m3huwxjq6pqaszdjf3d4ej9y\&quot;,\&quot;amount\&quot;:0.01},{\&quot;address\&quot;:\&quot;bc1qs59a7e23zpjm0znteytrxvj839dlp205e50zch\&quot;,\&quot;amount\&quot;:0.056}]~758748394~OHh6IIININmfmjGGsxlBBft2ch61VncaPscsp295h2ULx9xPY07Jom3d5cBifgoW    Finally after applying &#x60;sha-256&#x60; hash, we obtain the required &#x60;token&#x60;:        804ca9457b0fe3e4d243fe9e39e760ff1f287491ae8e79d015f92f7c6c96d7b1       - -- ## Important    * Send requests are commonly queued, optionally you can specify a callback to get your web / app notified as soon as the request has been fully broadcasted to the Network.    * Transaction is limited to &#x60;25&#x60; destination addresses per request      * Tx Hash is provided only through the callback      * Confirmed send requests information is &#x60;DELETED&#x60; after &#x60;3 days&#x60; of being confirmed    - -- ## Minimum Send Amounts     * &#x60;Bitcoin&#x60;: 0.0001 BTC   * &#x60;Litecoin&#x60;: 0.001 LTC   * &#x60;Bitcoin Cash&#x60;: 0.001 BCH    - -- ## Callback Send requests are commonly queued, optionally you can specify a callback to get your web / app notified as soon as the request has been fully broadcasted to the Network.  The callback sent to your callback url is a **POST** request with the following parameters:       *Example:*      currency:     \&quot;BTC\&quot;     walletId:     \&quot;698fd3f6-5482-4798-8a46-6732af440616\&quot;     requestId:    \&quot;123fd3f6-9078-5790-4f40-6932bf440120\&quot;     timestamp:    1577179288     lastupdate:   1577179388     amount:       \&quot;0.01\&quot;     callback:     \&quot;https://callback-url.com\&quot;     destination:  &#39;[{\&quot;address\&quot;: \&quot;bc1qf6ss0qtdn5q42...\&quot;                   \&quot;amount\&quot;: \&quot;0.01\&quot;}]&#39;     txid:         \&quot;2cdac43e92e65cb428e3ed992bcf61347...\&quot;     status:       0 
        /// </remarks>
        /// <exception cref="payrobot.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Object Currency:   * &#x60;btc&#x60;: Bitcoin   * &#x60;ltc&#x60;: Litecoin   * &#x60;bch&#x60;: Bitcoin Cash </param>
        /// <param name="walletId">Wallet where funds to send are stored</param>
        /// <param name="destination">JSON formatted array with all the destination addres(es) and the amount(s) to send\\ &#x60;[{\&quot;address\&quot;:\&quot;desired-destination-address\&quot;,\&quot;amount\&quot;:X.XXXXXXXX}, ...]&#x60; </param>
        /// <param name="seed">Unique random string generated by your web/app. **IT MUST BE UNIQUE PER TRANSACTION PER WALLET**</param>
        /// <param name="token">SHA-256 hash of the concatenated string (substituting with the proper data):\\ &#x60;walletId~destination~seed~walletPassphrase&#x60; </param>
        /// <param name="callback">Optional callback to notify your web / app as soon as the send request has been fully broadcasted to the Network (optional)</param>
        /// <returns>Task of WalletSendRequest</returns>
        System.Threading.Tasks.Task<WalletSendRequest> CreateWalletSendRequestAsync (string currency, string walletId, string destination, string seed, string token, string callback = default(string));

        /// <summary>
        /// Send funds from a wallet
        /// </summary>
        /// <remarks>
        /// Sends funds from a wallet to one or multiple addresses.  - -- ## Required Authorization Token This transaction requires an authorization &#x60;token&#x60; which is the result of the &#x60;sha-256&#x60; hash of the following string:        walletId~destination~seed~walletPassphrase    **For example**  Considering the following example values for the token:   - &#x60;walletId&#x60; 9df3f909-088d-4724-b34f-9a587c5ccc15   - &#x60;destination&#x60;     [{\&quot;address\&quot;:\&quot;bc1q5defveu0acrf87m3huwxjq6pqaszdjf3d4ej9y\&quot;,\&quot;amount\&quot;:0.01},{\&quot;address\&quot;:\&quot;bc1qs59a7e23zpjm0znteytrxvj839dlp205e50zch\&quot;,\&quot;amount\&quot;:0.056}]     - &#x60;seed&#x60; 758748394   - &#x60;walletPassphrase&#x60; **Note: this was provided when you created the wallet** OHh6IIININmfmjGGsxlBBft2ch61VncaPscsp295h2ULx9xPY07Jom3d5cBifgoW    The resulting string, previous to hash is::        9df3f909-088d-4724-b34f-9a587c5ccc15~[{\&quot;address\&quot;:\&quot;bc1q5defveu0acrf87m3huwxjq6pqaszdjf3d4ej9y\&quot;,\&quot;amount\&quot;:0.01},{\&quot;address\&quot;:\&quot;bc1qs59a7e23zpjm0znteytrxvj839dlp205e50zch\&quot;,\&quot;amount\&quot;:0.056}]~758748394~OHh6IIININmfmjGGsxlBBft2ch61VncaPscsp295h2ULx9xPY07Jom3d5cBifgoW    Finally after applying &#x60;sha-256&#x60; hash, we obtain the required &#x60;token&#x60;:        804ca9457b0fe3e4d243fe9e39e760ff1f287491ae8e79d015f92f7c6c96d7b1       - -- ## Important    * Send requests are commonly queued, optionally you can specify a callback to get your web / app notified as soon as the request has been fully broadcasted to the Network.    * Transaction is limited to &#x60;25&#x60; destination addresses per request      * Tx Hash is provided only through the callback      * Confirmed send requests information is &#x60;DELETED&#x60; after &#x60;3 days&#x60; of being confirmed    - -- ## Minimum Send Amounts     * &#x60;Bitcoin&#x60;: 0.0001 BTC   * &#x60;Litecoin&#x60;: 0.001 LTC   * &#x60;Bitcoin Cash&#x60;: 0.001 BCH    - -- ## Callback Send requests are commonly queued, optionally you can specify a callback to get your web / app notified as soon as the request has been fully broadcasted to the Network.  The callback sent to your callback url is a **POST** request with the following parameters:       *Example:*      currency:     \&quot;BTC\&quot;     walletId:     \&quot;698fd3f6-5482-4798-8a46-6732af440616\&quot;     requestId:    \&quot;123fd3f6-9078-5790-4f40-6932bf440120\&quot;     timestamp:    1577179288     lastupdate:   1577179388     amount:       \&quot;0.01\&quot;     callback:     \&quot;https://callback-url.com\&quot;     destination:  &#39;[{\&quot;address\&quot;: \&quot;bc1qf6ss0qtdn5q42...\&quot;                   \&quot;amount\&quot;: \&quot;0.01\&quot;}]&#39;     txid:         \&quot;2cdac43e92e65cb428e3ed992bcf61347...\&quot;     status:       0 
        /// </remarks>
        /// <exception cref="payrobot.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Object Currency:   * &#x60;btc&#x60;: Bitcoin   * &#x60;ltc&#x60;: Litecoin   * &#x60;bch&#x60;: Bitcoin Cash </param>
        /// <param name="walletId">Wallet where funds to send are stored</param>
        /// <param name="destination">JSON formatted array with all the destination addres(es) and the amount(s) to send\\ &#x60;[{\&quot;address\&quot;:\&quot;desired-destination-address\&quot;,\&quot;amount\&quot;:X.XXXXXXXX}, ...]&#x60; </param>
        /// <param name="seed">Unique random string generated by your web/app. **IT MUST BE UNIQUE PER TRANSACTION PER WALLET**</param>
        /// <param name="token">SHA-256 hash of the concatenated string (substituting with the proper data):\\ &#x60;walletId~destination~seed~walletPassphrase&#x60; </param>
        /// <param name="callback">Optional callback to notify your web / app as soon as the send request has been fully broadcasted to the Network (optional)</param>
        /// <returns>Task of ApiResponse (WalletSendRequest)</returns>
        System.Threading.Tasks.Task<ApiResponse<WalletSendRequest>> CreateWalletSendRequestAsyncWithHttpInfo (string currency, string walletId, string destination, string seed, string token, string callback = default(string));
        /// <summary>
        /// Get Wallet information
        /// </summary>
        /// <remarks>
        /// Gets detailed information from a Wallet
        /// </remarks>
        /// <exception cref="payrobot.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Object Currency:   * &#x60;btc&#x60;: Bitcoin   * &#x60;ltc&#x60;: Litecoin   * &#x60;bch&#x60;: Bitcoin Cash </param>
        /// <param name="walletId">ID of the desired Wallet</param>
        /// <returns>Task of Wallet</returns>
        System.Threading.Tasks.Task<Wallet> GetWalletAsync (string currency, string walletId);

        /// <summary>
        /// Get Wallet information
        /// </summary>
        /// <remarks>
        /// Gets detailed information from a Wallet
        /// </remarks>
        /// <exception cref="payrobot.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Object Currency:   * &#x60;btc&#x60;: Bitcoin   * &#x60;ltc&#x60;: Litecoin   * &#x60;bch&#x60;: Bitcoin Cash </param>
        /// <param name="walletId">ID of the desired Wallet</param>
        /// <returns>Task of ApiResponse (Wallet)</returns>
        System.Threading.Tasks.Task<ApiResponse<Wallet>> GetWalletAsyncWithHttpInfo (string currency, string walletId);
        /// <summary>
        /// Get last transactions of wallet
        /// </summary>
        /// <remarks>
        /// Gets last 100 transactions of the wallet
        /// </remarks>
        /// <exception cref="payrobot.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Object Currency:   * &#x60;btc&#x60;: Bitcoin   * &#x60;ltc&#x60;: Litecoin   * &#x60;bch&#x60;: Bitcoin Cash </param>
        /// <param name="walletId">ID of the desired Wallet</param>
        /// <returns>Task of WalletHistory</returns>
        System.Threading.Tasks.Task<WalletHistory> GetWalletHistoryAsync (string currency, string walletId);

        /// <summary>
        /// Get last transactions of wallet
        /// </summary>
        /// <remarks>
        /// Gets last 100 transactions of the wallet
        /// </remarks>
        /// <exception cref="payrobot.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Object Currency:   * &#x60;btc&#x60;: Bitcoin   * &#x60;ltc&#x60;: Litecoin   * &#x60;bch&#x60;: Bitcoin Cash </param>
        /// <param name="walletId">ID of the desired Wallet</param>
        /// <returns>Task of ApiResponse (WalletHistory)</returns>
        System.Threading.Tasks.Task<ApiResponse<WalletHistory>> GetWalletHistoryAsyncWithHttpInfo (string currency, string walletId);
        /// <summary>
        /// Obtain information of a send request
        /// </summary>
        /// <remarks>
        /// Obtains detailed information about a send request
        /// </remarks>
        /// <exception cref="payrobot.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Object Currency:   * &#x60;btc&#x60;: Bitcoin   * &#x60;ltc&#x60;: Litecoin   * &#x60;bch&#x60;: Bitcoin Cash </param>
        /// <param name="walletId">Wallet where funds to send are stored</param>
        /// <param name="requestId">Send Request ID</param>
        /// <returns>Task of WalletSendRequest</returns>
        System.Threading.Tasks.Task<WalletSendRequest> GetWalletSendRequestAsync (string currency, string walletId, string requestId);

        /// <summary>
        /// Obtain information of a send request
        /// </summary>
        /// <remarks>
        /// Obtains detailed information about a send request
        /// </remarks>
        /// <exception cref="payrobot.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Object Currency:   * &#x60;btc&#x60;: Bitcoin   * &#x60;ltc&#x60;: Litecoin   * &#x60;bch&#x60;: Bitcoin Cash </param>
        /// <param name="walletId">Wallet where funds to send are stored</param>
        /// <param name="requestId">Send Request ID</param>
        /// <returns>Task of ApiResponse (WalletSendRequest)</returns>
        System.Threading.Tasks.Task<ApiResponse<WalletSendRequest>> GetWalletSendRequestAsyncWithHttpInfo (string currency, string walletId, string requestId);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class WalletApi : IWalletApi
    {
        private payrobot.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="WalletApi"/> class.
        /// </summary>
        /// <returns></returns>
        public WalletApi(String basePath)
        {
            this.Configuration = new payrobot.Client.Configuration { BasePath = basePath };

            ExceptionFactory = payrobot.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="WalletApi"/> class
        /// </summary>
        /// <returns></returns>
        public WalletApi()
        {
            this.Configuration = payrobot.Client.Configuration.Default;

            ExceptionFactory = payrobot.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="WalletApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public WalletApi(payrobot.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = payrobot.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = payrobot.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public payrobot.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public payrobot.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Create new wallet Creates a new wallet where you can receive, store and send funds for your web or app.  - -- ## Important This method returns your &#x60;Wallet Passphrase&#x60;, it will be required when you send funds from your wallet. **Please keep it safe and private** 
        /// </summary>
        /// <exception cref="payrobot.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Object Currency:   * &#x60;btc&#x60;: Bitcoin   * &#x60;ltc&#x60;: Litecoin   * &#x60;bch&#x60;: Bitcoin Cash </param>
        /// <returns>WalletCreationInfo</returns>
        public WalletCreationInfo CreateWallet (string currency)
        {
             ApiResponse<WalletCreationInfo> localVarResponse = CreateWalletWithHttpInfo(currency);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create new wallet Creates a new wallet where you can receive, store and send funds for your web or app.  - -- ## Important This method returns your &#x60;Wallet Passphrase&#x60;, it will be required when you send funds from your wallet. **Please keep it safe and private** 
        /// </summary>
        /// <exception cref="payrobot.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Object Currency:   * &#x60;btc&#x60;: Bitcoin   * &#x60;ltc&#x60;: Litecoin   * &#x60;bch&#x60;: Bitcoin Cash </param>
        /// <returns>ApiResponse of WalletCreationInfo</returns>
        public ApiResponse<WalletCreationInfo> CreateWalletWithHttpInfo (string currency)
        {
            // verify the required parameter 'currency' is set
            if (currency == null)
                throw new ApiException(400, "Missing required parameter 'currency' when calling WalletApi->CreateWallet");

            var localVarPath = "/{currency}/wallets";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (currency != null) localVarPathParams.Add("currency", this.Configuration.ApiClient.ParameterToString(currency)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateWallet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WalletCreationInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (WalletCreationInfo) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WalletCreationInfo)));
        }

        /// <summary>
        /// Create new wallet Creates a new wallet where you can receive, store and send funds for your web or app.  - -- ## Important This method returns your &#x60;Wallet Passphrase&#x60;, it will be required when you send funds from your wallet. **Please keep it safe and private** 
        /// </summary>
        /// <exception cref="payrobot.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Object Currency:   * &#x60;btc&#x60;: Bitcoin   * &#x60;ltc&#x60;: Litecoin   * &#x60;bch&#x60;: Bitcoin Cash </param>
        /// <returns>Task of WalletCreationInfo</returns>
        public async System.Threading.Tasks.Task<WalletCreationInfo> CreateWalletAsync (string currency)
        {
             ApiResponse<WalletCreationInfo> localVarResponse = await CreateWalletAsyncWithHttpInfo(currency);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create new wallet Creates a new wallet where you can receive, store and send funds for your web or app.  - -- ## Important This method returns your &#x60;Wallet Passphrase&#x60;, it will be required when you send funds from your wallet. **Please keep it safe and private** 
        /// </summary>
        /// <exception cref="payrobot.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Object Currency:   * &#x60;btc&#x60;: Bitcoin   * &#x60;ltc&#x60;: Litecoin   * &#x60;bch&#x60;: Bitcoin Cash </param>
        /// <returns>Task of ApiResponse (WalletCreationInfo)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<WalletCreationInfo>> CreateWalletAsyncWithHttpInfo (string currency)
        {
            // verify the required parameter 'currency' is set
            if (currency == null)
                throw new ApiException(400, "Missing required parameter 'currency' when calling WalletApi->CreateWallet");

            var localVarPath = "/{currency}/wallets";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (currency != null) localVarPathParams.Add("currency", this.Configuration.ApiClient.ParameterToString(currency)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateWallet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WalletCreationInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (WalletCreationInfo) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WalletCreationInfo)));
        }

        /// <summary>
        /// Send funds from a wallet Sends funds from a wallet to one or multiple addresses.  - -- ## Required Authorization Token This transaction requires an authorization &#x60;token&#x60; which is the result of the &#x60;sha-256&#x60; hash of the following string:        walletId~destination~seed~walletPassphrase    **For example**  Considering the following example values for the token:   - &#x60;walletId&#x60; 9df3f909-088d-4724-b34f-9a587c5ccc15   - &#x60;destination&#x60;     [{\&quot;address\&quot;:\&quot;bc1q5defveu0acrf87m3huwxjq6pqaszdjf3d4ej9y\&quot;,\&quot;amount\&quot;:0.01},{\&quot;address\&quot;:\&quot;bc1qs59a7e23zpjm0znteytrxvj839dlp205e50zch\&quot;,\&quot;amount\&quot;:0.056}]     - &#x60;seed&#x60; 758748394   - &#x60;walletPassphrase&#x60; **Note: this was provided when you created the wallet** OHh6IIININmfmjGGsxlBBft2ch61VncaPscsp295h2ULx9xPY07Jom3d5cBifgoW    The resulting string, previous to hash is::        9df3f909-088d-4724-b34f-9a587c5ccc15~[{\&quot;address\&quot;:\&quot;bc1q5defveu0acrf87m3huwxjq6pqaszdjf3d4ej9y\&quot;,\&quot;amount\&quot;:0.01},{\&quot;address\&quot;:\&quot;bc1qs59a7e23zpjm0znteytrxvj839dlp205e50zch\&quot;,\&quot;amount\&quot;:0.056}]~758748394~OHh6IIININmfmjGGsxlBBft2ch61VncaPscsp295h2ULx9xPY07Jom3d5cBifgoW    Finally after applying &#x60;sha-256&#x60; hash, we obtain the required &#x60;token&#x60;:        804ca9457b0fe3e4d243fe9e39e760ff1f287491ae8e79d015f92f7c6c96d7b1       - -- ## Important    * Send requests are commonly queued, optionally you can specify a callback to get your web / app notified as soon as the request has been fully broadcasted to the Network.    * Transaction is limited to &#x60;25&#x60; destination addresses per request      * Tx Hash is provided only through the callback      * Confirmed send requests information is &#x60;DELETED&#x60; after &#x60;3 days&#x60; of being confirmed    - -- ## Minimum Send Amounts     * &#x60;Bitcoin&#x60;: 0.0001 BTC   * &#x60;Litecoin&#x60;: 0.001 LTC   * &#x60;Bitcoin Cash&#x60;: 0.001 BCH    - -- ## Callback Send requests are commonly queued, optionally you can specify a callback to get your web / app notified as soon as the request has been fully broadcasted to the Network.  The callback sent to your callback url is a **POST** request with the following parameters:       *Example:*      currency:     \&quot;BTC\&quot;     walletId:     \&quot;698fd3f6-5482-4798-8a46-6732af440616\&quot;     requestId:    \&quot;123fd3f6-9078-5790-4f40-6932bf440120\&quot;     timestamp:    1577179288     lastupdate:   1577179388     amount:       \&quot;0.01\&quot;     callback:     \&quot;https://callback-url.com\&quot;     destination:  &#39;[{\&quot;address\&quot;: \&quot;bc1qf6ss0qtdn5q42...\&quot;                   \&quot;amount\&quot;: \&quot;0.01\&quot;}]&#39;     txid:         \&quot;2cdac43e92e65cb428e3ed992bcf61347...\&quot;     status:       0 
        /// </summary>
        /// <exception cref="payrobot.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Object Currency:   * &#x60;btc&#x60;: Bitcoin   * &#x60;ltc&#x60;: Litecoin   * &#x60;bch&#x60;: Bitcoin Cash </param>
        /// <param name="walletId">Wallet where funds to send are stored</param>
        /// <param name="destination">JSON formatted array with all the destination addres(es) and the amount(s) to send\\ &#x60;[{\&quot;address\&quot;:\&quot;desired-destination-address\&quot;,\&quot;amount\&quot;:X.XXXXXXXX}, ...]&#x60; </param>
        /// <param name="seed">Unique random string generated by your web/app. **IT MUST BE UNIQUE PER TRANSACTION PER WALLET**</param>
        /// <param name="token">SHA-256 hash of the concatenated string (substituting with the proper data):\\ &#x60;walletId~destination~seed~walletPassphrase&#x60; </param>
        /// <param name="callback">Optional callback to notify your web / app as soon as the send request has been fully broadcasted to the Network (optional)</param>
        /// <returns>WalletSendRequest</returns>
        public WalletSendRequest CreateWalletSendRequest (string currency, string walletId, string destination, string seed, string token, string callback = default(string))
        {
             ApiResponse<WalletSendRequest> localVarResponse = CreateWalletSendRequestWithHttpInfo(currency, walletId, destination, seed, token, callback);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Send funds from a wallet Sends funds from a wallet to one or multiple addresses.  - -- ## Required Authorization Token This transaction requires an authorization &#x60;token&#x60; which is the result of the &#x60;sha-256&#x60; hash of the following string:        walletId~destination~seed~walletPassphrase    **For example**  Considering the following example values for the token:   - &#x60;walletId&#x60; 9df3f909-088d-4724-b34f-9a587c5ccc15   - &#x60;destination&#x60;     [{\&quot;address\&quot;:\&quot;bc1q5defveu0acrf87m3huwxjq6pqaszdjf3d4ej9y\&quot;,\&quot;amount\&quot;:0.01},{\&quot;address\&quot;:\&quot;bc1qs59a7e23zpjm0znteytrxvj839dlp205e50zch\&quot;,\&quot;amount\&quot;:0.056}]     - &#x60;seed&#x60; 758748394   - &#x60;walletPassphrase&#x60; **Note: this was provided when you created the wallet** OHh6IIININmfmjGGsxlBBft2ch61VncaPscsp295h2ULx9xPY07Jom3d5cBifgoW    The resulting string, previous to hash is::        9df3f909-088d-4724-b34f-9a587c5ccc15~[{\&quot;address\&quot;:\&quot;bc1q5defveu0acrf87m3huwxjq6pqaszdjf3d4ej9y\&quot;,\&quot;amount\&quot;:0.01},{\&quot;address\&quot;:\&quot;bc1qs59a7e23zpjm0znteytrxvj839dlp205e50zch\&quot;,\&quot;amount\&quot;:0.056}]~758748394~OHh6IIININmfmjGGsxlBBft2ch61VncaPscsp295h2ULx9xPY07Jom3d5cBifgoW    Finally after applying &#x60;sha-256&#x60; hash, we obtain the required &#x60;token&#x60;:        804ca9457b0fe3e4d243fe9e39e760ff1f287491ae8e79d015f92f7c6c96d7b1       - -- ## Important    * Send requests are commonly queued, optionally you can specify a callback to get your web / app notified as soon as the request has been fully broadcasted to the Network.    * Transaction is limited to &#x60;25&#x60; destination addresses per request      * Tx Hash is provided only through the callback      * Confirmed send requests information is &#x60;DELETED&#x60; after &#x60;3 days&#x60; of being confirmed    - -- ## Minimum Send Amounts     * &#x60;Bitcoin&#x60;: 0.0001 BTC   * &#x60;Litecoin&#x60;: 0.001 LTC   * &#x60;Bitcoin Cash&#x60;: 0.001 BCH    - -- ## Callback Send requests are commonly queued, optionally you can specify a callback to get your web / app notified as soon as the request has been fully broadcasted to the Network.  The callback sent to your callback url is a **POST** request with the following parameters:       *Example:*      currency:     \&quot;BTC\&quot;     walletId:     \&quot;698fd3f6-5482-4798-8a46-6732af440616\&quot;     requestId:    \&quot;123fd3f6-9078-5790-4f40-6932bf440120\&quot;     timestamp:    1577179288     lastupdate:   1577179388     amount:       \&quot;0.01\&quot;     callback:     \&quot;https://callback-url.com\&quot;     destination:  &#39;[{\&quot;address\&quot;: \&quot;bc1qf6ss0qtdn5q42...\&quot;                   \&quot;amount\&quot;: \&quot;0.01\&quot;}]&#39;     txid:         \&quot;2cdac43e92e65cb428e3ed992bcf61347...\&quot;     status:       0 
        /// </summary>
        /// <exception cref="payrobot.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Object Currency:   * &#x60;btc&#x60;: Bitcoin   * &#x60;ltc&#x60;: Litecoin   * &#x60;bch&#x60;: Bitcoin Cash </param>
        /// <param name="walletId">Wallet where funds to send are stored</param>
        /// <param name="destination">JSON formatted array with all the destination addres(es) and the amount(s) to send\\ &#x60;[{\&quot;address\&quot;:\&quot;desired-destination-address\&quot;,\&quot;amount\&quot;:X.XXXXXXXX}, ...]&#x60; </param>
        /// <param name="seed">Unique random string generated by your web/app. **IT MUST BE UNIQUE PER TRANSACTION PER WALLET**</param>
        /// <param name="token">SHA-256 hash of the concatenated string (substituting with the proper data):\\ &#x60;walletId~destination~seed~walletPassphrase&#x60; </param>
        /// <param name="callback">Optional callback to notify your web / app as soon as the send request has been fully broadcasted to the Network (optional)</param>
        /// <returns>ApiResponse of WalletSendRequest</returns>
        public ApiResponse<WalletSendRequest> CreateWalletSendRequestWithHttpInfo (string currency, string walletId, string destination, string seed, string token, string callback = default(string))
        {
            // verify the required parameter 'currency' is set
            if (currency == null)
                throw new ApiException(400, "Missing required parameter 'currency' when calling WalletApi->CreateWalletSendRequest");
            // verify the required parameter 'walletId' is set
            if (walletId == null)
                throw new ApiException(400, "Missing required parameter 'walletId' when calling WalletApi->CreateWalletSendRequest");
            // verify the required parameter 'destination' is set
            if (destination == null)
                throw new ApiException(400, "Missing required parameter 'destination' when calling WalletApi->CreateWalletSendRequest");
            // verify the required parameter 'seed' is set
            if (seed == null)
                throw new ApiException(400, "Missing required parameter 'seed' when calling WalletApi->CreateWalletSendRequest");
            // verify the required parameter 'token' is set
            if (token == null)
                throw new ApiException(400, "Missing required parameter 'token' when calling WalletApi->CreateWalletSendRequest");

            var localVarPath = "/{currency}/wallets/{walletId}/send-requests";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (currency != null) localVarPathParams.Add("currency", this.Configuration.ApiClient.ParameterToString(currency)); // path parameter
            if (walletId != null) localVarPathParams.Add("walletId", this.Configuration.ApiClient.ParameterToString(walletId)); // path parameter
            if (destination != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "destination", destination)); // query parameter
            if (seed != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "seed", seed)); // query parameter
            if (token != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", token)); // query parameter
            if (callback != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "callback", callback)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateWalletSendRequest", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WalletSendRequest>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (WalletSendRequest) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WalletSendRequest)));
        }

        /// <summary>
        /// Send funds from a wallet Sends funds from a wallet to one or multiple addresses.  - -- ## Required Authorization Token This transaction requires an authorization &#x60;token&#x60; which is the result of the &#x60;sha-256&#x60; hash of the following string:        walletId~destination~seed~walletPassphrase    **For example**  Considering the following example values for the token:   - &#x60;walletId&#x60; 9df3f909-088d-4724-b34f-9a587c5ccc15   - &#x60;destination&#x60;     [{\&quot;address\&quot;:\&quot;bc1q5defveu0acrf87m3huwxjq6pqaszdjf3d4ej9y\&quot;,\&quot;amount\&quot;:0.01},{\&quot;address\&quot;:\&quot;bc1qs59a7e23zpjm0znteytrxvj839dlp205e50zch\&quot;,\&quot;amount\&quot;:0.056}]     - &#x60;seed&#x60; 758748394   - &#x60;walletPassphrase&#x60; **Note: this was provided when you created the wallet** OHh6IIININmfmjGGsxlBBft2ch61VncaPscsp295h2ULx9xPY07Jom3d5cBifgoW    The resulting string, previous to hash is::        9df3f909-088d-4724-b34f-9a587c5ccc15~[{\&quot;address\&quot;:\&quot;bc1q5defveu0acrf87m3huwxjq6pqaszdjf3d4ej9y\&quot;,\&quot;amount\&quot;:0.01},{\&quot;address\&quot;:\&quot;bc1qs59a7e23zpjm0znteytrxvj839dlp205e50zch\&quot;,\&quot;amount\&quot;:0.056}]~758748394~OHh6IIININmfmjGGsxlBBft2ch61VncaPscsp295h2ULx9xPY07Jom3d5cBifgoW    Finally after applying &#x60;sha-256&#x60; hash, we obtain the required &#x60;token&#x60;:        804ca9457b0fe3e4d243fe9e39e760ff1f287491ae8e79d015f92f7c6c96d7b1       - -- ## Important    * Send requests are commonly queued, optionally you can specify a callback to get your web / app notified as soon as the request has been fully broadcasted to the Network.    * Transaction is limited to &#x60;25&#x60; destination addresses per request      * Tx Hash is provided only through the callback      * Confirmed send requests information is &#x60;DELETED&#x60; after &#x60;3 days&#x60; of being confirmed    - -- ## Minimum Send Amounts     * &#x60;Bitcoin&#x60;: 0.0001 BTC   * &#x60;Litecoin&#x60;: 0.001 LTC   * &#x60;Bitcoin Cash&#x60;: 0.001 BCH    - -- ## Callback Send requests are commonly queued, optionally you can specify a callback to get your web / app notified as soon as the request has been fully broadcasted to the Network.  The callback sent to your callback url is a **POST** request with the following parameters:       *Example:*      currency:     \&quot;BTC\&quot;     walletId:     \&quot;698fd3f6-5482-4798-8a46-6732af440616\&quot;     requestId:    \&quot;123fd3f6-9078-5790-4f40-6932bf440120\&quot;     timestamp:    1577179288     lastupdate:   1577179388     amount:       \&quot;0.01\&quot;     callback:     \&quot;https://callback-url.com\&quot;     destination:  &#39;[{\&quot;address\&quot;: \&quot;bc1qf6ss0qtdn5q42...\&quot;                   \&quot;amount\&quot;: \&quot;0.01\&quot;}]&#39;     txid:         \&quot;2cdac43e92e65cb428e3ed992bcf61347...\&quot;     status:       0 
        /// </summary>
        /// <exception cref="payrobot.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Object Currency:   * &#x60;btc&#x60;: Bitcoin   * &#x60;ltc&#x60;: Litecoin   * &#x60;bch&#x60;: Bitcoin Cash </param>
        /// <param name="walletId">Wallet where funds to send are stored</param>
        /// <param name="destination">JSON formatted array with all the destination addres(es) and the amount(s) to send\\ &#x60;[{\&quot;address\&quot;:\&quot;desired-destination-address\&quot;,\&quot;amount\&quot;:X.XXXXXXXX}, ...]&#x60; </param>
        /// <param name="seed">Unique random string generated by your web/app. **IT MUST BE UNIQUE PER TRANSACTION PER WALLET**</param>
        /// <param name="token">SHA-256 hash of the concatenated string (substituting with the proper data):\\ &#x60;walletId~destination~seed~walletPassphrase&#x60; </param>
        /// <param name="callback">Optional callback to notify your web / app as soon as the send request has been fully broadcasted to the Network (optional)</param>
        /// <returns>Task of WalletSendRequest</returns>
        public async System.Threading.Tasks.Task<WalletSendRequest> CreateWalletSendRequestAsync (string currency, string walletId, string destination, string seed, string token, string callback = default(string))
        {
             ApiResponse<WalletSendRequest> localVarResponse = await CreateWalletSendRequestAsyncWithHttpInfo(currency, walletId, destination, seed, token, callback);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Send funds from a wallet Sends funds from a wallet to one or multiple addresses.  - -- ## Required Authorization Token This transaction requires an authorization &#x60;token&#x60; which is the result of the &#x60;sha-256&#x60; hash of the following string:        walletId~destination~seed~walletPassphrase    **For example**  Considering the following example values for the token:   - &#x60;walletId&#x60; 9df3f909-088d-4724-b34f-9a587c5ccc15   - &#x60;destination&#x60;     [{\&quot;address\&quot;:\&quot;bc1q5defveu0acrf87m3huwxjq6pqaszdjf3d4ej9y\&quot;,\&quot;amount\&quot;:0.01},{\&quot;address\&quot;:\&quot;bc1qs59a7e23zpjm0znteytrxvj839dlp205e50zch\&quot;,\&quot;amount\&quot;:0.056}]     - &#x60;seed&#x60; 758748394   - &#x60;walletPassphrase&#x60; **Note: this was provided when you created the wallet** OHh6IIININmfmjGGsxlBBft2ch61VncaPscsp295h2ULx9xPY07Jom3d5cBifgoW    The resulting string, previous to hash is::        9df3f909-088d-4724-b34f-9a587c5ccc15~[{\&quot;address\&quot;:\&quot;bc1q5defveu0acrf87m3huwxjq6pqaszdjf3d4ej9y\&quot;,\&quot;amount\&quot;:0.01},{\&quot;address\&quot;:\&quot;bc1qs59a7e23zpjm0znteytrxvj839dlp205e50zch\&quot;,\&quot;amount\&quot;:0.056}]~758748394~OHh6IIININmfmjGGsxlBBft2ch61VncaPscsp295h2ULx9xPY07Jom3d5cBifgoW    Finally after applying &#x60;sha-256&#x60; hash, we obtain the required &#x60;token&#x60;:        804ca9457b0fe3e4d243fe9e39e760ff1f287491ae8e79d015f92f7c6c96d7b1       - -- ## Important    * Send requests are commonly queued, optionally you can specify a callback to get your web / app notified as soon as the request has been fully broadcasted to the Network.    * Transaction is limited to &#x60;25&#x60; destination addresses per request      * Tx Hash is provided only through the callback      * Confirmed send requests information is &#x60;DELETED&#x60; after &#x60;3 days&#x60; of being confirmed    - -- ## Minimum Send Amounts     * &#x60;Bitcoin&#x60;: 0.0001 BTC   * &#x60;Litecoin&#x60;: 0.001 LTC   * &#x60;Bitcoin Cash&#x60;: 0.001 BCH    - -- ## Callback Send requests are commonly queued, optionally you can specify a callback to get your web / app notified as soon as the request has been fully broadcasted to the Network.  The callback sent to your callback url is a **POST** request with the following parameters:       *Example:*      currency:     \&quot;BTC\&quot;     walletId:     \&quot;698fd3f6-5482-4798-8a46-6732af440616\&quot;     requestId:    \&quot;123fd3f6-9078-5790-4f40-6932bf440120\&quot;     timestamp:    1577179288     lastupdate:   1577179388     amount:       \&quot;0.01\&quot;     callback:     \&quot;https://callback-url.com\&quot;     destination:  &#39;[{\&quot;address\&quot;: \&quot;bc1qf6ss0qtdn5q42...\&quot;                   \&quot;amount\&quot;: \&quot;0.01\&quot;}]&#39;     txid:         \&quot;2cdac43e92e65cb428e3ed992bcf61347...\&quot;     status:       0 
        /// </summary>
        /// <exception cref="payrobot.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Object Currency:   * &#x60;btc&#x60;: Bitcoin   * &#x60;ltc&#x60;: Litecoin   * &#x60;bch&#x60;: Bitcoin Cash </param>
        /// <param name="walletId">Wallet where funds to send are stored</param>
        /// <param name="destination">JSON formatted array with all the destination addres(es) and the amount(s) to send\\ &#x60;[{\&quot;address\&quot;:\&quot;desired-destination-address\&quot;,\&quot;amount\&quot;:X.XXXXXXXX}, ...]&#x60; </param>
        /// <param name="seed">Unique random string generated by your web/app. **IT MUST BE UNIQUE PER TRANSACTION PER WALLET**</param>
        /// <param name="token">SHA-256 hash of the concatenated string (substituting with the proper data):\\ &#x60;walletId~destination~seed~walletPassphrase&#x60; </param>
        /// <param name="callback">Optional callback to notify your web / app as soon as the send request has been fully broadcasted to the Network (optional)</param>
        /// <returns>Task of ApiResponse (WalletSendRequest)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<WalletSendRequest>> CreateWalletSendRequestAsyncWithHttpInfo (string currency, string walletId, string destination, string seed, string token, string callback = default(string))
        {
            // verify the required parameter 'currency' is set
            if (currency == null)
                throw new ApiException(400, "Missing required parameter 'currency' when calling WalletApi->CreateWalletSendRequest");
            // verify the required parameter 'walletId' is set
            if (walletId == null)
                throw new ApiException(400, "Missing required parameter 'walletId' when calling WalletApi->CreateWalletSendRequest");
            // verify the required parameter 'destination' is set
            if (destination == null)
                throw new ApiException(400, "Missing required parameter 'destination' when calling WalletApi->CreateWalletSendRequest");
            // verify the required parameter 'seed' is set
            if (seed == null)
                throw new ApiException(400, "Missing required parameter 'seed' when calling WalletApi->CreateWalletSendRequest");
            // verify the required parameter 'token' is set
            if (token == null)
                throw new ApiException(400, "Missing required parameter 'token' when calling WalletApi->CreateWalletSendRequest");

            var localVarPath = "/{currency}/wallets/{walletId}/send-requests";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (currency != null) localVarPathParams.Add("currency", this.Configuration.ApiClient.ParameterToString(currency)); // path parameter
            if (walletId != null) localVarPathParams.Add("walletId", this.Configuration.ApiClient.ParameterToString(walletId)); // path parameter
            if (destination != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "destination", destination)); // query parameter
            if (seed != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "seed", seed)); // query parameter
            if (token != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", token)); // query parameter
            if (callback != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "callback", callback)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateWalletSendRequest", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WalletSendRequest>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (WalletSendRequest) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WalletSendRequest)));
        }

        /// <summary>
        /// Get Wallet information Gets detailed information from a Wallet
        /// </summary>
        /// <exception cref="payrobot.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Object Currency:   * &#x60;btc&#x60;: Bitcoin   * &#x60;ltc&#x60;: Litecoin   * &#x60;bch&#x60;: Bitcoin Cash </param>
        /// <param name="walletId">ID of the desired Wallet</param>
        /// <returns>Wallet</returns>
        public Wallet GetWallet (string currency, string walletId)
        {
             ApiResponse<Wallet> localVarResponse = GetWalletWithHttpInfo(currency, walletId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Wallet information Gets detailed information from a Wallet
        /// </summary>
        /// <exception cref="payrobot.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Object Currency:   * &#x60;btc&#x60;: Bitcoin   * &#x60;ltc&#x60;: Litecoin   * &#x60;bch&#x60;: Bitcoin Cash </param>
        /// <param name="walletId">ID of the desired Wallet</param>
        /// <returns>ApiResponse of Wallet</returns>
        public ApiResponse<Wallet> GetWalletWithHttpInfo (string currency, string walletId)
        {
            // verify the required parameter 'currency' is set
            if (currency == null)
                throw new ApiException(400, "Missing required parameter 'currency' when calling WalletApi->GetWallet");
            // verify the required parameter 'walletId' is set
            if (walletId == null)
                throw new ApiException(400, "Missing required parameter 'walletId' when calling WalletApi->GetWallet");

            var localVarPath = "/{currency}/wallets/{walletId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (currency != null) localVarPathParams.Add("currency", this.Configuration.ApiClient.ParameterToString(currency)); // path parameter
            if (walletId != null) localVarPathParams.Add("walletId", this.Configuration.ApiClient.ParameterToString(walletId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetWallet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Wallet>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Wallet) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Wallet)));
        }

        /// <summary>
        /// Get Wallet information Gets detailed information from a Wallet
        /// </summary>
        /// <exception cref="payrobot.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Object Currency:   * &#x60;btc&#x60;: Bitcoin   * &#x60;ltc&#x60;: Litecoin   * &#x60;bch&#x60;: Bitcoin Cash </param>
        /// <param name="walletId">ID of the desired Wallet</param>
        /// <returns>Task of Wallet</returns>
        public async System.Threading.Tasks.Task<Wallet> GetWalletAsync (string currency, string walletId)
        {
             ApiResponse<Wallet> localVarResponse = await GetWalletAsyncWithHttpInfo(currency, walletId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Wallet information Gets detailed information from a Wallet
        /// </summary>
        /// <exception cref="payrobot.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Object Currency:   * &#x60;btc&#x60;: Bitcoin   * &#x60;ltc&#x60;: Litecoin   * &#x60;bch&#x60;: Bitcoin Cash </param>
        /// <param name="walletId">ID of the desired Wallet</param>
        /// <returns>Task of ApiResponse (Wallet)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Wallet>> GetWalletAsyncWithHttpInfo (string currency, string walletId)
        {
            // verify the required parameter 'currency' is set
            if (currency == null)
                throw new ApiException(400, "Missing required parameter 'currency' when calling WalletApi->GetWallet");
            // verify the required parameter 'walletId' is set
            if (walletId == null)
                throw new ApiException(400, "Missing required parameter 'walletId' when calling WalletApi->GetWallet");

            var localVarPath = "/{currency}/wallets/{walletId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (currency != null) localVarPathParams.Add("currency", this.Configuration.ApiClient.ParameterToString(currency)); // path parameter
            if (walletId != null) localVarPathParams.Add("walletId", this.Configuration.ApiClient.ParameterToString(walletId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetWallet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Wallet>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Wallet) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Wallet)));
        }

        /// <summary>
        /// Get last transactions of wallet Gets last 100 transactions of the wallet
        /// </summary>
        /// <exception cref="payrobot.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Object Currency:   * &#x60;btc&#x60;: Bitcoin   * &#x60;ltc&#x60;: Litecoin   * &#x60;bch&#x60;: Bitcoin Cash </param>
        /// <param name="walletId">ID of the desired Wallet</param>
        /// <returns>WalletHistory</returns>
        public WalletHistory GetWalletHistory (string currency, string walletId)
        {
             ApiResponse<WalletHistory> localVarResponse = GetWalletHistoryWithHttpInfo(currency, walletId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get last transactions of wallet Gets last 100 transactions of the wallet
        /// </summary>
        /// <exception cref="payrobot.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Object Currency:   * &#x60;btc&#x60;: Bitcoin   * &#x60;ltc&#x60;: Litecoin   * &#x60;bch&#x60;: Bitcoin Cash </param>
        /// <param name="walletId">ID of the desired Wallet</param>
        /// <returns>ApiResponse of WalletHistory</returns>
        public ApiResponse<WalletHistory> GetWalletHistoryWithHttpInfo (string currency, string walletId)
        {
            // verify the required parameter 'currency' is set
            if (currency == null)
                throw new ApiException(400, "Missing required parameter 'currency' when calling WalletApi->GetWalletHistory");
            // verify the required parameter 'walletId' is set
            if (walletId == null)
                throw new ApiException(400, "Missing required parameter 'walletId' when calling WalletApi->GetWalletHistory");

            var localVarPath = "/{currency}/wallets/{walletId}/history";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (currency != null) localVarPathParams.Add("currency", this.Configuration.ApiClient.ParameterToString(currency)); // path parameter
            if (walletId != null) localVarPathParams.Add("walletId", this.Configuration.ApiClient.ParameterToString(walletId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetWalletHistory", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WalletHistory>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (WalletHistory) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WalletHistory)));
        }

        /// <summary>
        /// Get last transactions of wallet Gets last 100 transactions of the wallet
        /// </summary>
        /// <exception cref="payrobot.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Object Currency:   * &#x60;btc&#x60;: Bitcoin   * &#x60;ltc&#x60;: Litecoin   * &#x60;bch&#x60;: Bitcoin Cash </param>
        /// <param name="walletId">ID of the desired Wallet</param>
        /// <returns>Task of WalletHistory</returns>
        public async System.Threading.Tasks.Task<WalletHistory> GetWalletHistoryAsync (string currency, string walletId)
        {
             ApiResponse<WalletHistory> localVarResponse = await GetWalletHistoryAsyncWithHttpInfo(currency, walletId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get last transactions of wallet Gets last 100 transactions of the wallet
        /// </summary>
        /// <exception cref="payrobot.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Object Currency:   * &#x60;btc&#x60;: Bitcoin   * &#x60;ltc&#x60;: Litecoin   * &#x60;bch&#x60;: Bitcoin Cash </param>
        /// <param name="walletId">ID of the desired Wallet</param>
        /// <returns>Task of ApiResponse (WalletHistory)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<WalletHistory>> GetWalletHistoryAsyncWithHttpInfo (string currency, string walletId)
        {
            // verify the required parameter 'currency' is set
            if (currency == null)
                throw new ApiException(400, "Missing required parameter 'currency' when calling WalletApi->GetWalletHistory");
            // verify the required parameter 'walletId' is set
            if (walletId == null)
                throw new ApiException(400, "Missing required parameter 'walletId' when calling WalletApi->GetWalletHistory");

            var localVarPath = "/{currency}/wallets/{walletId}/history";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (currency != null) localVarPathParams.Add("currency", this.Configuration.ApiClient.ParameterToString(currency)); // path parameter
            if (walletId != null) localVarPathParams.Add("walletId", this.Configuration.ApiClient.ParameterToString(walletId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetWalletHistory", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WalletHistory>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (WalletHistory) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WalletHistory)));
        }

        /// <summary>
        /// Obtain information of a send request Obtains detailed information about a send request
        /// </summary>
        /// <exception cref="payrobot.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Object Currency:   * &#x60;btc&#x60;: Bitcoin   * &#x60;ltc&#x60;: Litecoin   * &#x60;bch&#x60;: Bitcoin Cash </param>
        /// <param name="walletId">Wallet where funds to send are stored</param>
        /// <param name="requestId">Send Request ID</param>
        /// <returns>WalletSendRequest</returns>
        public WalletSendRequest GetWalletSendRequest (string currency, string walletId, string requestId)
        {
             ApiResponse<WalletSendRequest> localVarResponse = GetWalletSendRequestWithHttpInfo(currency, walletId, requestId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Obtain information of a send request Obtains detailed information about a send request
        /// </summary>
        /// <exception cref="payrobot.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Object Currency:   * &#x60;btc&#x60;: Bitcoin   * &#x60;ltc&#x60;: Litecoin   * &#x60;bch&#x60;: Bitcoin Cash </param>
        /// <param name="walletId">Wallet where funds to send are stored</param>
        /// <param name="requestId">Send Request ID</param>
        /// <returns>ApiResponse of WalletSendRequest</returns>
        public ApiResponse<WalletSendRequest> GetWalletSendRequestWithHttpInfo (string currency, string walletId, string requestId)
        {
            // verify the required parameter 'currency' is set
            if (currency == null)
                throw new ApiException(400, "Missing required parameter 'currency' when calling WalletApi->GetWalletSendRequest");
            // verify the required parameter 'walletId' is set
            if (walletId == null)
                throw new ApiException(400, "Missing required parameter 'walletId' when calling WalletApi->GetWalletSendRequest");
            // verify the required parameter 'requestId' is set
            if (requestId == null)
                throw new ApiException(400, "Missing required parameter 'requestId' when calling WalletApi->GetWalletSendRequest");

            var localVarPath = "/{currency}/wallets/{walletId}/send-requests/{requestId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (currency != null) localVarPathParams.Add("currency", this.Configuration.ApiClient.ParameterToString(currency)); // path parameter
            if (walletId != null) localVarPathParams.Add("walletId", this.Configuration.ApiClient.ParameterToString(walletId)); // path parameter
            if (requestId != null) localVarPathParams.Add("requestId", this.Configuration.ApiClient.ParameterToString(requestId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetWalletSendRequest", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WalletSendRequest>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (WalletSendRequest) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WalletSendRequest)));
        }

        /// <summary>
        /// Obtain information of a send request Obtains detailed information about a send request
        /// </summary>
        /// <exception cref="payrobot.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Object Currency:   * &#x60;btc&#x60;: Bitcoin   * &#x60;ltc&#x60;: Litecoin   * &#x60;bch&#x60;: Bitcoin Cash </param>
        /// <param name="walletId">Wallet where funds to send are stored</param>
        /// <param name="requestId">Send Request ID</param>
        /// <returns>Task of WalletSendRequest</returns>
        public async System.Threading.Tasks.Task<WalletSendRequest> GetWalletSendRequestAsync (string currency, string walletId, string requestId)
        {
             ApiResponse<WalletSendRequest> localVarResponse = await GetWalletSendRequestAsyncWithHttpInfo(currency, walletId, requestId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Obtain information of a send request Obtains detailed information about a send request
        /// </summary>
        /// <exception cref="payrobot.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Object Currency:   * &#x60;btc&#x60;: Bitcoin   * &#x60;ltc&#x60;: Litecoin   * &#x60;bch&#x60;: Bitcoin Cash </param>
        /// <param name="walletId">Wallet where funds to send are stored</param>
        /// <param name="requestId">Send Request ID</param>
        /// <returns>Task of ApiResponse (WalletSendRequest)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<WalletSendRequest>> GetWalletSendRequestAsyncWithHttpInfo (string currency, string walletId, string requestId)
        {
            // verify the required parameter 'currency' is set
            if (currency == null)
                throw new ApiException(400, "Missing required parameter 'currency' when calling WalletApi->GetWalletSendRequest");
            // verify the required parameter 'walletId' is set
            if (walletId == null)
                throw new ApiException(400, "Missing required parameter 'walletId' when calling WalletApi->GetWalletSendRequest");
            // verify the required parameter 'requestId' is set
            if (requestId == null)
                throw new ApiException(400, "Missing required parameter 'requestId' when calling WalletApi->GetWalletSendRequest");

            var localVarPath = "/{currency}/wallets/{walletId}/send-requests/{requestId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (currency != null) localVarPathParams.Add("currency", this.Configuration.ApiClient.ParameterToString(currency)); // path parameter
            if (walletId != null) localVarPathParams.Add("walletId", this.Configuration.ApiClient.ParameterToString(walletId)); // path parameter
            if (requestId != null) localVarPathParams.Add("requestId", this.Configuration.ApiClient.ParameterToString(requestId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetWalletSendRequest", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WalletSendRequest>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (WalletSendRequest) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WalletSendRequest)));
        }

    }
}
